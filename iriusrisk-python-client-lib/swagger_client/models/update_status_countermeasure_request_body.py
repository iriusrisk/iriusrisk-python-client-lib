# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateStatusCountermeasureRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_name': 'str',
        'rejected_reason': 'str'
    }

    attribute_map = {
        'status_name': 'statusName',
        'rejected_reason': 'rejectedReason'
    }

    def __init__(self, status_name=None, rejected_reason=None):  # noqa: E501
        """UpdateStatusCountermeasureRequestBody - a model defined in Swagger"""  # noqa: E501

        self._status_name = None
        self._rejected_reason = None
        self.discriminator = None

        if status_name is not None:
            self.status_name = status_name
        if rejected_reason is not None:
            self.rejected_reason = rejected_reason

    @property
    def status_name(self):
        """Gets the status_name of this UpdateStatusCountermeasureRequestBody.  # noqa: E501

        New state of the countermeasure ( rejected | recommended | required | implemented )  # noqa: E501

        :return: The status_name of this UpdateStatusCountermeasureRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this UpdateStatusCountermeasureRequestBody.

        New state of the countermeasure ( rejected | recommended | required | implemented )  # noqa: E501

        :param status_name: The status_name of this UpdateStatusCountermeasureRequestBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["rejected", "recommended", "required", "implemented"]  # noqa: E501
        if status_name not in allowed_values:
            raise ValueError(
                "Invalid value for `status_name` ({0}), must be one of {1}"  # noqa: E501
                .format(status_name, allowed_values)
            )

        self._status_name = status_name

    @property
    def rejected_reason(self):
        """Gets the rejected_reason of this UpdateStatusCountermeasureRequestBody.  # noqa: E501

        Reason for rejecting the countermeasure  # noqa: E501

        :return: The rejected_reason of this UpdateStatusCountermeasureRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._rejected_reason

    @rejected_reason.setter
    def rejected_reason(self, rejected_reason):
        """Sets the rejected_reason of this UpdateStatusCountermeasureRequestBody.

        Reason for rejecting the countermeasure  # noqa: E501

        :param rejected_reason: The rejected_reason of this UpdateStatusCountermeasureRequestBody.  # noqa: E501
        :type: str
        """

        self._rejected_reason = rejected_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateStatusCountermeasureRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateStatusCountermeasureRequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
