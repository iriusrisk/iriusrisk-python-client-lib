# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'source': 'ProductsrefcomponentscomponentReftestscweSource',
        'control': 'ProductsrefcomponentscomponentReftestscweControl',
        'weakness': 'ProductsrefcomponentscomponentReftestscweControl'
    }

    attribute_map = {
        'id': 'id',
        'source': 'source',
        'control': 'control',
        'weakness': 'weakness'
    }

    def __init__(self, id=None, source=None, control=None, weakness=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._source = None
        self._control = None
        self._weakness = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if source is not None:
            self.source = source
        if control is not None:
            self.control = control
        if weakness is not None:
            self.weakness = weakness

    @property
    def id(self):
        """Gets the id of this InlineResponse2001.  # noqa: E501


        :return: The id of this InlineResponse2001.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2001.


        :param id: The id of this InlineResponse2001.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def source(self):
        """Gets the source of this InlineResponse2001.  # noqa: E501


        :return: The source of this InlineResponse2001.  # noqa: E501
        :rtype: ProductsrefcomponentscomponentReftestscweSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InlineResponse2001.


        :param source: The source of this InlineResponse2001.  # noqa: E501
        :type: ProductsrefcomponentscomponentReftestscweSource
        """

        self._source = source

    @property
    def control(self):
        """Gets the control of this InlineResponse2001.  # noqa: E501


        :return: The control of this InlineResponse2001.  # noqa: E501
        :rtype: ProductsrefcomponentscomponentReftestscweControl
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this InlineResponse2001.


        :param control: The control of this InlineResponse2001.  # noqa: E501
        :type: ProductsrefcomponentscomponentReftestscweControl
        """

        self._control = control

    @property
    def weakness(self):
        """Gets the weakness of this InlineResponse2001.  # noqa: E501


        :return: The weakness of this InlineResponse2001.  # noqa: E501
        :rtype: ProductsrefcomponentscomponentReftestscweControl
        """
        return self._weakness

    @weakness.setter
    def weakness(self, weakness):
        """Sets the weakness of this InlineResponse2001.


        :param weakness: The weakness of this InlineResponse2001.  # noqa: E501
        :type: ProductsrefcomponentscomponentReftestscweControl
        """

        self._weakness = weakness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
