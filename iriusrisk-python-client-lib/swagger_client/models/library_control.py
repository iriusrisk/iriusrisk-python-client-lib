# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LibraryControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref': 'str',
        'name': 'str',
        'desc': 'str',
        'platform': 'str',
        'cost': 'int',
        'risk': 'int',
        'state': 'str',
        'mitigation': 'int',
        'implementations': 'list[Implementation]',
        'references': 'list[Reference]',
        'standards': 'list[Standard]',
        'udts': 'list[Udt]',
        'test': 'Test'
    }

    attribute_map = {
        'ref': 'ref',
        'name': 'name',
        'desc': 'desc',
        'platform': 'platform',
        'cost': 'cost',
        'risk': 'risk',
        'state': 'state',
        'mitigation': 'mitigation',
        'implementations': 'implementations',
        'references': 'references',
        'standards': 'standards',
        'udts': 'udts',
        'test': 'test'
    }

    def __init__(self, ref=None, name=None, desc=None, platform=None, cost=None, risk=None, state=None, mitigation=None, implementations=None, references=None, standards=None, udts=None, test=None):  # noqa: E501
        """LibraryControl - a model defined in Swagger"""  # noqa: E501

        self._ref = None
        self._name = None
        self._desc = None
        self._platform = None
        self._cost = None
        self._risk = None
        self._state = None
        self._mitigation = None
        self._implementations = None
        self._references = None
        self._standards = None
        self._udts = None
        self._test = None
        self.discriminator = None

        if ref is not None:
            self.ref = ref
        if name is not None:
            self.name = name
        if desc is not None:
            self.desc = desc
        if platform is not None:
            self.platform = platform
        if cost is not None:
            self.cost = cost
        if risk is not None:
            self.risk = risk
        if state is not None:
            self.state = state
        if mitigation is not None:
            self.mitigation = mitigation
        if implementations is not None:
            self.implementations = implementations
        if references is not None:
            self.references = references
        if standards is not None:
            self.standards = standards
        if udts is not None:
            self.udts = udts
        if test is not None:
            self.test = test

    @property
    def ref(self):
        """Gets the ref of this LibraryControl.  # noqa: E501


        :return: The ref of this LibraryControl.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this LibraryControl.


        :param ref: The ref of this LibraryControl.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def name(self):
        """Gets the name of this LibraryControl.  # noqa: E501


        :return: The name of this LibraryControl.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LibraryControl.


        :param name: The name of this LibraryControl.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def desc(self):
        """Gets the desc of this LibraryControl.  # noqa: E501


        :return: The desc of this LibraryControl.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this LibraryControl.


        :param desc: The desc of this LibraryControl.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def platform(self):
        """Gets the platform of this LibraryControl.  # noqa: E501


        :return: The platform of this LibraryControl.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this LibraryControl.


        :param platform: The platform of this LibraryControl.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def cost(self):
        """Gets the cost of this LibraryControl.  # noqa: E501


        :return: The cost of this LibraryControl.  # noqa: E501
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this LibraryControl.


        :param cost: The cost of this LibraryControl.  # noqa: E501
        :type: int
        """

        self._cost = cost

    @property
    def risk(self):
        """Gets the risk of this LibraryControl.  # noqa: E501


        :return: The risk of this LibraryControl.  # noqa: E501
        :rtype: int
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this LibraryControl.


        :param risk: The risk of this LibraryControl.  # noqa: E501
        :type: int
        """

        self._risk = risk

    @property
    def state(self):
        """Gets the state of this LibraryControl.  # noqa: E501


        :return: The state of this LibraryControl.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LibraryControl.


        :param state: The state of this LibraryControl.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def mitigation(self):
        """Gets the mitigation of this LibraryControl.  # noqa: E501


        :return: The mitigation of this LibraryControl.  # noqa: E501
        :rtype: int
        """
        return self._mitigation

    @mitigation.setter
    def mitigation(self, mitigation):
        """Sets the mitigation of this LibraryControl.


        :param mitigation: The mitigation of this LibraryControl.  # noqa: E501
        :type: int
        """

        self._mitigation = mitigation

    @property
    def implementations(self):
        """Gets the implementations of this LibraryControl.  # noqa: E501


        :return: The implementations of this LibraryControl.  # noqa: E501
        :rtype: list[Implementation]
        """
        return self._implementations

    @implementations.setter
    def implementations(self, implementations):
        """Sets the implementations of this LibraryControl.


        :param implementations: The implementations of this LibraryControl.  # noqa: E501
        :type: list[Implementation]
        """

        self._implementations = implementations

    @property
    def references(self):
        """Gets the references of this LibraryControl.  # noqa: E501


        :return: The references of this LibraryControl.  # noqa: E501
        :rtype: list[Reference]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this LibraryControl.


        :param references: The references of this LibraryControl.  # noqa: E501
        :type: list[Reference]
        """

        self._references = references

    @property
    def standards(self):
        """Gets the standards of this LibraryControl.  # noqa: E501


        :return: The standards of this LibraryControl.  # noqa: E501
        :rtype: list[Standard]
        """
        return self._standards

    @standards.setter
    def standards(self, standards):
        """Sets the standards of this LibraryControl.


        :param standards: The standards of this LibraryControl.  # noqa: E501
        :type: list[Standard]
        """

        self._standards = standards

    @property
    def udts(self):
        """Gets the udts of this LibraryControl.  # noqa: E501


        :return: The udts of this LibraryControl.  # noqa: E501
        :rtype: list[Udt]
        """
        return self._udts

    @udts.setter
    def udts(self, udts):
        """Sets the udts of this LibraryControl.


        :param udts: The udts of this LibraryControl.  # noqa: E501
        :type: list[Udt]
        """

        self._udts = udts

    @property
    def test(self):
        """Gets the test of this LibraryControl.  # noqa: E501


        :return: The test of this LibraryControl.  # noqa: E501
        :rtype: Test
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this LibraryControl.


        :param test: The test of this LibraryControl.  # noqa: E501
        :type: Test
        """

        self._test = test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryControl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
