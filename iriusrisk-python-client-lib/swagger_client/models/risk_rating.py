# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RiskRating(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confidentiality': 'str',
        'integrity': 'str',
        'availability': 'str',
        'ease_of_exploitation': 'str'
    }

    attribute_map = {
        'confidentiality': 'confidentiality',
        'integrity': 'integrity',
        'availability': 'availability',
        'ease_of_exploitation': 'easeOfExploitation'
    }

    def __init__(self, confidentiality=None, integrity=None, availability=None, ease_of_exploitation=None):  # noqa: E501
        """RiskRating - a model defined in Swagger"""  # noqa: E501

        self._confidentiality = None
        self._integrity = None
        self._availability = None
        self._ease_of_exploitation = None
        self.discriminator = None

        if confidentiality is not None:
            self.confidentiality = confidentiality
        if integrity is not None:
            self.integrity = integrity
        if availability is not None:
            self.availability = availability
        if ease_of_exploitation is not None:
            self.ease_of_exploitation = ease_of_exploitation

    @property
    def confidentiality(self):
        """Gets the confidentiality of this RiskRating.  # noqa: E501


        :return: The confidentiality of this RiskRating.  # noqa: E501
        :rtype: str
        """
        return self._confidentiality

    @confidentiality.setter
    def confidentiality(self, confidentiality):
        """Sets the confidentiality of this RiskRating.


        :param confidentiality: The confidentiality of this RiskRating.  # noqa: E501
        :type: str
        """

        self._confidentiality = confidentiality

    @property
    def integrity(self):
        """Gets the integrity of this RiskRating.  # noqa: E501


        :return: The integrity of this RiskRating.  # noqa: E501
        :rtype: str
        """
        return self._integrity

    @integrity.setter
    def integrity(self, integrity):
        """Sets the integrity of this RiskRating.


        :param integrity: The integrity of this RiskRating.  # noqa: E501
        :type: str
        """

        self._integrity = integrity

    @property
    def availability(self):
        """Gets the availability of this RiskRating.  # noqa: E501


        :return: The availability of this RiskRating.  # noqa: E501
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this RiskRating.


        :param availability: The availability of this RiskRating.  # noqa: E501
        :type: str
        """

        self._availability = availability

    @property
    def ease_of_exploitation(self):
        """Gets the ease_of_exploitation of this RiskRating.  # noqa: E501


        :return: The ease_of_exploitation of this RiskRating.  # noqa: E501
        :rtype: str
        """
        return self._ease_of_exploitation

    @ease_of_exploitation.setter
    def ease_of_exploitation(self, ease_of_exploitation):
        """Sets the ease_of_exploitation of this RiskRating.


        :param ease_of_exploitation: The ease_of_exploitation of this RiskRating.  # noqa: E501
        :type: str
        """

        self._ease_of_exploitation = ease_of_exploitation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskRating, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskRating):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
