# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TemplatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def products_upload_post(self, api_token, ref, name, file_name, **kwargs):  # noqa: E501
        """Creates a new product, library or template from a XML file upload.  # noqa: E501

        Creates a new product, library or template from a XML file upload. Conditions to be able to perform the action: - To have the permission **PRODUCT_CREATE** granted allows to create a product. - To have the permission **LIBRARY_UPDATE** granted allows to create a library. - To have the permission **TEMPLATE_UPDATE** granted allows to create a template.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_upload_post(api_token, ref, name, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str ref: Product ref (required)
        :param str name: Product name (required)
        :param file file_name: File to upload in XML format (required)
        :param str type: Product type - STANDARD (By default), TEMPLATE or LIBRARY
        :return: ProductShort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_upload_post_with_http_info(api_token, ref, name, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.products_upload_post_with_http_info(api_token, ref, name, file_name, **kwargs)  # noqa: E501
            return data

    def products_upload_post_with_http_info(self, api_token, ref, name, file_name, **kwargs):  # noqa: E501
        """Creates a new product, library or template from a XML file upload.  # noqa: E501

        Creates a new product, library or template from a XML file upload. Conditions to be able to perform the action: - To have the permission **PRODUCT_CREATE** granted allows to create a product. - To have the permission **LIBRARY_UPDATE** granted allows to create a library. - To have the permission **TEMPLATE_UPDATE** granted allows to create a template.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_upload_post_with_http_info(api_token, ref, name, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str ref: Product ref (required)
        :param str name: Product name (required)
        :param file file_name: File to upload in XML format (required)
        :param str type: Product type - STANDARD (By default), TEMPLATE or LIBRARY
        :return: ProductShort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'ref', 'name', 'file_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `products_upload_post`")  # noqa: E501
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_upload_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `products_upload_post`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `products_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'ref' in params:
            form_params.append(('ref', params['ref']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'file_name' in params:
            local_var_files['fileName'] = params['file_name']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductShort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
