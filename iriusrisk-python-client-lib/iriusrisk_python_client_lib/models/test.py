# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Test(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiry_date': 'str',
        'expiry_period': 'int',
        'steps': 'str',
        'notes': 'str',
        'source': 'TestSource',
        'references': 'list[Reference]',
        'udts': 'list[Udt]'
    }

    attribute_map = {
        'expiry_date': 'expiryDate',
        'expiry_period': 'expiryPeriod',
        'steps': 'steps',
        'notes': 'notes',
        'source': 'source',
        'references': 'references',
        'udts': 'udts'
    }

    def __init__(self, expiry_date=None, expiry_period=None, steps=None, notes=None, source=None, references=None, udts=None):  # noqa: E501
        """Test - a model defined in Swagger"""  # noqa: E501

        self._expiry_date = None
        self._expiry_period = None
        self._steps = None
        self._notes = None
        self._source = None
        self._references = None
        self._udts = None
        self.discriminator = None

        if expiry_date is not None:
            self.expiry_date = expiry_date
        if expiry_period is not None:
            self.expiry_period = expiry_period
        if steps is not None:
            self.steps = steps
        if notes is not None:
            self.notes = notes
        if source is not None:
            self.source = source
        if references is not None:
            self.references = references
        if udts is not None:
            self.udts = udts

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Test.  # noqa: E501


        :return: The expiry_date of this Test.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Test.


        :param expiry_date: The expiry_date of this Test.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def expiry_period(self):
        """Gets the expiry_period of this Test.  # noqa: E501


        :return: The expiry_period of this Test.  # noqa: E501
        :rtype: int
        """
        return self._expiry_period

    @expiry_period.setter
    def expiry_period(self, expiry_period):
        """Sets the expiry_period of this Test.


        :param expiry_period: The expiry_period of this Test.  # noqa: E501
        :type: int
        """

        self._expiry_period = expiry_period

    @property
    def steps(self):
        """Gets the steps of this Test.  # noqa: E501


        :return: The steps of this Test.  # noqa: E501
        :rtype: str
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this Test.


        :param steps: The steps of this Test.  # noqa: E501
        :type: str
        """

        self._steps = steps

    @property
    def notes(self):
        """Gets the notes of this Test.  # noqa: E501


        :return: The notes of this Test.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Test.


        :param notes: The notes of this Test.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def source(self):
        """Gets the source of this Test.  # noqa: E501


        :return: The source of this Test.  # noqa: E501
        :rtype: TestSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Test.


        :param source: The source of this Test.  # noqa: E501
        :type: TestSource
        """

        self._source = source

    @property
    def references(self):
        """Gets the references of this Test.  # noqa: E501


        :return: The references of this Test.  # noqa: E501
        :rtype: list[Reference]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Test.


        :param references: The references of this Test.  # noqa: E501
        :type: list[Reference]
        """

        self._references = references

    @property
    def udts(self):
        """Gets the udts of this Test.  # noqa: E501


        :return: The udts of this Test.  # noqa: E501
        :rtype: list[Udt]
        """
        return self._udts

    @udts.setter
    def udts(self, udts):
        """Sets the udts of this Test.


        :param udts: The udts of this Test.  # noqa: E501
        :type: list[Udt]
        """

        self._udts = udts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Test, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Test):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
