# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref': 'str',
        'name': 'str',
        'revision': 'int',
        'type': 'str',
        'status': 'str',
        'priority': 'int',
        'tags': 'str',
        'desc': 'str',
        'workflow_state': 'str',
        'questions': 'list[Question]',
        'diagram': 'ArchitectureDiagram',
        'assets': 'list[ProductAsset]',
        'access_types': 'list[ProductAccessType]',
        'trust_zones': 'list[ProductTrustZone]',
        'settings': 'list[ProductSetting]',
        'udts': 'list[Udt]',
        'supported_standards': 'list[SupportedStandard]',
        'category_components': 'list[CategoryComponent]',
        'component_definitions': 'list[ComponentDefinition]',
        'components': 'list[Component]',
        'dataflows': 'list[DataFlow]',
        'users': 'list[str]',
        'groups': 'list[str]'
    }

    attribute_map = {
        'ref': 'ref',
        'name': 'name',
        'revision': 'revision',
        'type': 'type',
        'status': 'status',
        'priority': 'priority',
        'tags': 'tags',
        'desc': 'desc',
        'workflow_state': 'workflowState',
        'questions': 'questions',
        'diagram': 'diagram',
        'assets': 'assets',
        'access_types': 'accessTypes',
        'trust_zones': 'trustZones',
        'settings': 'settings',
        'udts': 'udts',
        'supported_standards': 'supportedStandards',
        'category_components': 'categoryComponents',
        'component_definitions': 'componentDefinitions',
        'components': 'components',
        'dataflows': 'dataflows',
        'users': 'users',
        'groups': 'groups'
    }

    def __init__(self, ref=None, name=None, revision=None, type=None, status=None, priority=None, tags=None, desc=None, workflow_state=None, questions=None, diagram=None, assets=None, access_types=None, trust_zones=None, settings=None, udts=None, supported_standards=None, category_components=None, component_definitions=None, components=None, dataflows=None, users=None, groups=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501

        self._ref = None
        self._name = None
        self._revision = None
        self._type = None
        self._status = None
        self._priority = None
        self._tags = None
        self._desc = None
        self._workflow_state = None
        self._questions = None
        self._diagram = None
        self._assets = None
        self._access_types = None
        self._trust_zones = None
        self._settings = None
        self._udts = None
        self._supported_standards = None
        self._category_components = None
        self._component_definitions = None
        self._components = None
        self._dataflows = None
        self._users = None
        self._groups = None
        self.discriminator = None

        if ref is not None:
            self.ref = ref
        if name is not None:
            self.name = name
        if revision is not None:
            self.revision = revision
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if priority is not None:
            self.priority = priority
        if tags is not None:
            self.tags = tags
        if desc is not None:
            self.desc = desc
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if questions is not None:
            self.questions = questions
        if diagram is not None:
            self.diagram = diagram
        if assets is not None:
            self.assets = assets
        if access_types is not None:
            self.access_types = access_types
        if trust_zones is not None:
            self.trust_zones = trust_zones
        if settings is not None:
            self.settings = settings
        if udts is not None:
            self.udts = udts
        if supported_standards is not None:
            self.supported_standards = supported_standards
        if category_components is not None:
            self.category_components = category_components
        if component_definitions is not None:
            self.component_definitions = component_definitions
        if components is not None:
            self.components = components
        if dataflows is not None:
            self.dataflows = dataflows
        if users is not None:
            self.users = users
        if groups is not None:
            self.groups = groups

    @property
    def ref(self):
        """Gets the ref of this Product.  # noqa: E501


        :return: The ref of this Product.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Product.


        :param ref: The ref of this Product.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def name(self):
        """Gets the name of this Product.  # noqa: E501


        :return: The name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.


        :param name: The name of this Product.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def revision(self):
        """Gets the revision of this Product.  # noqa: E501


        :return: The revision of this Product.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Product.


        :param revision: The revision of this Product.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def type(self):
        """Gets the type of this Product.  # noqa: E501


        :return: The type of this Product.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Product.


        :param type: The type of this Product.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Product.  # noqa: E501


        :return: The status of this Product.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Product.


        :param status: The status of this Product.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def priority(self):
        """Gets the priority of this Product.  # noqa: E501


        :return: The priority of this Product.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Product.


        :param priority: The priority of this Product.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def tags(self):
        """Gets the tags of this Product.  # noqa: E501


        :return: The tags of this Product.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Product.


        :param tags: The tags of this Product.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def desc(self):
        """Gets the desc of this Product.  # noqa: E501


        :return: The desc of this Product.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Product.


        :param desc: The desc of this Product.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def workflow_state(self):
        """Gets the workflow_state of this Product.  # noqa: E501


        :return: The workflow_state of this Product.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this Product.


        :param workflow_state: The workflow_state of this Product.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def questions(self):
        """Gets the questions of this Product.  # noqa: E501


        :return: The questions of this Product.  # noqa: E501
        :rtype: list[Question]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this Product.


        :param questions: The questions of this Product.  # noqa: E501
        :type: list[Question]
        """

        self._questions = questions

    @property
    def diagram(self):
        """Gets the diagram of this Product.  # noqa: E501


        :return: The diagram of this Product.  # noqa: E501
        :rtype: ArchitectureDiagram
        """
        return self._diagram

    @diagram.setter
    def diagram(self, diagram):
        """Sets the diagram of this Product.


        :param diagram: The diagram of this Product.  # noqa: E501
        :type: ArchitectureDiagram
        """

        self._diagram = diagram

    @property
    def assets(self):
        """Gets the assets of this Product.  # noqa: E501


        :return: The assets of this Product.  # noqa: E501
        :rtype: list[ProductAsset]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Product.


        :param assets: The assets of this Product.  # noqa: E501
        :type: list[ProductAsset]
        """

        self._assets = assets

    @property
    def access_types(self):
        """Gets the access_types of this Product.  # noqa: E501


        :return: The access_types of this Product.  # noqa: E501
        :rtype: list[ProductAccessType]
        """
        return self._access_types

    @access_types.setter
    def access_types(self, access_types):
        """Sets the access_types of this Product.


        :param access_types: The access_types of this Product.  # noqa: E501
        :type: list[ProductAccessType]
        """

        self._access_types = access_types

    @property
    def trust_zones(self):
        """Gets the trust_zones of this Product.  # noqa: E501


        :return: The trust_zones of this Product.  # noqa: E501
        :rtype: list[ProductTrustZone]
        """
        return self._trust_zones

    @trust_zones.setter
    def trust_zones(self, trust_zones):
        """Sets the trust_zones of this Product.


        :param trust_zones: The trust_zones of this Product.  # noqa: E501
        :type: list[ProductTrustZone]
        """

        self._trust_zones = trust_zones

    @property
    def settings(self):
        """Gets the settings of this Product.  # noqa: E501


        :return: The settings of this Product.  # noqa: E501
        :rtype: list[ProductSetting]
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Product.


        :param settings: The settings of this Product.  # noqa: E501
        :type: list[ProductSetting]
        """

        self._settings = settings

    @property
    def udts(self):
        """Gets the udts of this Product.  # noqa: E501


        :return: The udts of this Product.  # noqa: E501
        :rtype: list[Udt]
        """
        return self._udts

    @udts.setter
    def udts(self, udts):
        """Sets the udts of this Product.


        :param udts: The udts of this Product.  # noqa: E501
        :type: list[Udt]
        """

        self._udts = udts

    @property
    def supported_standards(self):
        """Gets the supported_standards of this Product.  # noqa: E501


        :return: The supported_standards of this Product.  # noqa: E501
        :rtype: list[SupportedStandard]
        """
        return self._supported_standards

    @supported_standards.setter
    def supported_standards(self, supported_standards):
        """Sets the supported_standards of this Product.


        :param supported_standards: The supported_standards of this Product.  # noqa: E501
        :type: list[SupportedStandard]
        """

        self._supported_standards = supported_standards

    @property
    def category_components(self):
        """Gets the category_components of this Product.  # noqa: E501


        :return: The category_components of this Product.  # noqa: E501
        :rtype: list[CategoryComponent]
        """
        return self._category_components

    @category_components.setter
    def category_components(self, category_components):
        """Sets the category_components of this Product.


        :param category_components: The category_components of this Product.  # noqa: E501
        :type: list[CategoryComponent]
        """

        self._category_components = category_components

    @property
    def component_definitions(self):
        """Gets the component_definitions of this Product.  # noqa: E501


        :return: The component_definitions of this Product.  # noqa: E501
        :rtype: list[ComponentDefinition]
        """
        return self._component_definitions

    @component_definitions.setter
    def component_definitions(self, component_definitions):
        """Sets the component_definitions of this Product.


        :param component_definitions: The component_definitions of this Product.  # noqa: E501
        :type: list[ComponentDefinition]
        """

        self._component_definitions = component_definitions

    @property
    def components(self):
        """Gets the components of this Product.  # noqa: E501


        :return: The components of this Product.  # noqa: E501
        :rtype: list[Component]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this Product.


        :param components: The components of this Product.  # noqa: E501
        :type: list[Component]
        """

        self._components = components

    @property
    def dataflows(self):
        """Gets the dataflows of this Product.  # noqa: E501


        :return: The dataflows of this Product.  # noqa: E501
        :rtype: list[DataFlow]
        """
        return self._dataflows

    @dataflows.setter
    def dataflows(self, dataflows):
        """Sets the dataflows of this Product.


        :param dataflows: The dataflows of this Product.  # noqa: E501
        :type: list[DataFlow]
        """

        self._dataflows = dataflows

    @property
    def users(self):
        """Gets the users of this Product.  # noqa: E501


        :return: The users of this Product.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Product.


        :param users: The users of this Product.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    @property
    def groups(self):
        """Gets the groups of this Product.  # noqa: E501


        :return: The groups of this Product.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Product.


        :param groups: The groups of this Product.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
