# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RiskSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'risk_count': 'RiskCount',
        'inherent_risk': 'int',
        'projected_risk': 'int',
        'residual_risk': 'int'
    }

    attribute_map = {
        'risk_count': 'riskCount',
        'inherent_risk': 'inherentRisk',
        'projected_risk': 'projectedRisk',
        'residual_risk': 'residualRisk'
    }

    def __init__(self, risk_count=None, inherent_risk=None, projected_risk=None, residual_risk=None):  # noqa: E501
        """RiskSummary - a model defined in Swagger"""  # noqa: E501

        self._risk_count = None
        self._inherent_risk = None
        self._projected_risk = None
        self._residual_risk = None
        self.discriminator = None

        if risk_count is not None:
            self.risk_count = risk_count
        if inherent_risk is not None:
            self.inherent_risk = inherent_risk
        if projected_risk is not None:
            self.projected_risk = projected_risk
        if residual_risk is not None:
            self.residual_risk = residual_risk

    @property
    def risk_count(self):
        """Gets the risk_count of this RiskSummary.  # noqa: E501


        :return: The risk_count of this RiskSummary.  # noqa: E501
        :rtype: RiskCount
        """
        return self._risk_count

    @risk_count.setter
    def risk_count(self, risk_count):
        """Sets the risk_count of this RiskSummary.


        :param risk_count: The risk_count of this RiskSummary.  # noqa: E501
        :type: RiskCount
        """

        self._risk_count = risk_count

    @property
    def inherent_risk(self):
        """Gets the inherent_risk of this RiskSummary.  # noqa: E501


        :return: The inherent_risk of this RiskSummary.  # noqa: E501
        :rtype: int
        """
        return self._inherent_risk

    @inherent_risk.setter
    def inherent_risk(self, inherent_risk):
        """Sets the inherent_risk of this RiskSummary.


        :param inherent_risk: The inherent_risk of this RiskSummary.  # noqa: E501
        :type: int
        """

        self._inherent_risk = inherent_risk

    @property
    def projected_risk(self):
        """Gets the projected_risk of this RiskSummary.  # noqa: E501


        :return: The projected_risk of this RiskSummary.  # noqa: E501
        :rtype: int
        """
        return self._projected_risk

    @projected_risk.setter
    def projected_risk(self, projected_risk):
        """Sets the projected_risk of this RiskSummary.


        :param projected_risk: The projected_risk of this RiskSummary.  # noqa: E501
        :type: int
        """

        self._projected_risk = projected_risk

    @property
    def residual_risk(self):
        """Gets the residual_risk of this RiskSummary.  # noqa: E501


        :return: The residual_risk of this RiskSummary.  # noqa: E501
        :rtype: int
        """
        return self._residual_risk

    @residual_risk.setter
    def residual_risk(self, residual_risk):
        """Sets the residual_risk of this RiskSummary.


        :param residual_risk: The residual_risk of this RiskSummary.  # noqa: E501
        :type: int
        """

        self._residual_risk = residual_risk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
