# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductTrustZone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'desc': 'str',
        'trust_rating': 'int'
    }

    attribute_map = {
        'name': 'name',
        'desc': 'desc',
        'trust_rating': 'trustRating'
    }

    def __init__(self, name=None, desc=None, trust_rating=None):  # noqa: E501
        """ProductTrustZone - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._desc = None
        self._trust_rating = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if desc is not None:
            self.desc = desc
        if trust_rating is not None:
            self.trust_rating = trust_rating

    @property
    def name(self):
        """Gets the name of this ProductTrustZone.  # noqa: E501


        :return: The name of this ProductTrustZone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductTrustZone.


        :param name: The name of this ProductTrustZone.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def desc(self):
        """Gets the desc of this ProductTrustZone.  # noqa: E501


        :return: The desc of this ProductTrustZone.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this ProductTrustZone.


        :param desc: The desc of this ProductTrustZone.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def trust_rating(self):
        """Gets the trust_rating of this ProductTrustZone.  # noqa: E501


        :return: The trust_rating of this ProductTrustZone.  # noqa: E501
        :rtype: int
        """
        return self._trust_rating

    @trust_rating.setter
    def trust_rating(self, trust_rating):
        """Sets the trust_rating of this ProductTrustZone.


        :param trust_rating: The trust_rating of this ProductTrustZone.  # noqa: E501
        :type: int
        """

        self._trust_rating = trust_rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductTrustZone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductTrustZone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
