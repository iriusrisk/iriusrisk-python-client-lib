# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataFlow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'source': 'str',
        'target': 'str',
        'assets': 'list[DataFlowAssets]'
    }

    attribute_map = {
        'name': 'name',
        'source': 'source',
        'target': 'target',
        'assets': 'assets'
    }

    def __init__(self, name=None, source=None, target=None, assets=None):  # noqa: E501
        """DataFlow - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._source = None
        self._target = None
        self._assets = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if source is not None:
            self.source = source
        if target is not None:
            self.target = target
        if assets is not None:
            self.assets = assets

    @property
    def name(self):
        """Gets the name of this DataFlow.  # noqa: E501

        Name of the DataFlow  # noqa: E501

        :return: The name of this DataFlow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataFlow.

        Name of the DataFlow  # noqa: E501

        :param name: The name of this DataFlow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this DataFlow.  # noqa: E501

        Reference of the source Component  # noqa: E501

        :return: The source of this DataFlow.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DataFlow.

        Reference of the source Component  # noqa: E501

        :param source: The source of this DataFlow.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this DataFlow.  # noqa: E501

        Reference of the target Component  # noqa: E501

        :return: The target of this DataFlow.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this DataFlow.

        Reference of the target Component  # noqa: E501

        :param target: The target of this DataFlow.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def assets(self):
        """Gets the assets of this DataFlow.  # noqa: E501


        :return: The assets of this DataFlow.  # noqa: E501
        :rtype: list[DataFlowAssets]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this DataFlow.


        :param assets: The assets of this DataFlow.  # noqa: E501
        :type: list[DataFlowAssets]
        """

        self._assets = assets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataFlow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataFlow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
