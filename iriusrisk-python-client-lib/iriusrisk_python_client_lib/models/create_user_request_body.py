# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateUserRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'auth': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'role_groups': 'list[str]'
    }

    attribute_map = {
        'username': 'username',
        'auth': 'auth',
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'role_groups': 'roleGroups'
    }

    def __init__(self, username=None, auth=None, email=None, first_name=None, last_name=None, role_groups=None):  # noqa: E501
        """CreateUserRequestBody - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._auth = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._role_groups = None
        self.discriminator = None

        self.username = username
        self.auth = auth
        self.email = email
        self.first_name = first_name
        self.last_name = last_name
        self.role_groups = role_groups

    @property
    def username(self):
        """Gets the username of this CreateUserRequestBody.  # noqa: E501

        Username of the user  # noqa: E501

        :return: The username of this CreateUserRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateUserRequestBody.

        Username of the user  # noqa: E501

        :param username: The username of this CreateUserRequestBody.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def auth(self):
        """Gets the auth of this CreateUserRequestBody.  # noqa: E501

        Authentication type  # noqa: E501

        :return: The auth of this CreateUserRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this CreateUserRequestBody.

        Authentication type  # noqa: E501

        :param auth: The auth of this CreateUserRequestBody.  # noqa: E501
        :type: str
        """
        if auth is None:
            raise ValueError("Invalid value for `auth`, must not be `None`")  # noqa: E501
        allowed_values = ["ldap", "saml"]  # noqa: E501
        if auth not in allowed_values:
            raise ValueError(
                "Invalid value for `auth` ({0}), must be one of {1}"  # noqa: E501
                .format(auth, allowed_values)
            )

        self._auth = auth

    @property
    def email(self):
        """Gets the email of this CreateUserRequestBody.  # noqa: E501

        Email of the user  # noqa: E501

        :return: The email of this CreateUserRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateUserRequestBody.

        Email of the user  # noqa: E501

        :param email: The email of this CreateUserRequestBody.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this CreateUserRequestBody.  # noqa: E501

        First name of the user  # noqa: E501

        :return: The first_name of this CreateUserRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CreateUserRequestBody.

        First name of the user  # noqa: E501

        :param first_name: The first_name of this CreateUserRequestBody.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CreateUserRequestBody.  # noqa: E501

        Last name of the user  # noqa: E501

        :return: The last_name of this CreateUserRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CreateUserRequestBody.

        Last name of the user  # noqa: E501

        :param last_name: The last_name of this CreateUserRequestBody.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def role_groups(self):
        """Gets the role_groups of this CreateUserRequestBody.  # noqa: E501

        List of roles' refs to assign to the user. Can be an empty list.  # noqa: E501

        :return: The role_groups of this CreateUserRequestBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._role_groups

    @role_groups.setter
    def role_groups(self, role_groups):
        """Sets the role_groups of this CreateUserRequestBody.

        List of roles' refs to assign to the user. Can be an empty list.  # noqa: E501

        :param role_groups: The role_groups of this CreateUserRequestBody.  # noqa: E501
        :type: list[str]
        """
        if role_groups is None:
            raise ValueError("Invalid value for `role_groups`, must not be `None`")  # noqa: E501

        self._role_groups = role_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateUserRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUserRequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
