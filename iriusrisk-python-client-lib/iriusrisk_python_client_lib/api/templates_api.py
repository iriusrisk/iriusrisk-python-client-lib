# coding: utf-8

"""
    IriusRisk API

    IriusRisk provides this featured API to allow for deeper customer integrations as well as enable very flexible automations within the many varied environments IriusRisk needs to operate.  **Beta Version Disclaimer:** Please note that this version of the API is currently in beta. While it offers advanced features for deeper integrations and flexible automations, we reserve the right to make breaking changes during this phase. Backwards compatibility may not be maintained. We encourage users to explore its capabilities but recommend caution in production environments as the API may undergo significant modifications.  # noqa: E501

    OpenAPI spec version: 2.0.0-beta.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from iriusrisk_python_client_lib.api_client import ApiClient


class TemplatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apply_standard_to_template(self, body, template_id, **kwargs):  # noqa: E501
        """Apply a standard to the recommended countermeasures of the template.  # noqa: E501

        Apply a standard to the recommended countermeasures of the template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_standard_to_template(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplyStandardToTemplateRequest body: (required)
        :param str template_id: ID of the template (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_standard_to_template_with_http_info(body, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_standard_to_template_with_http_info(body, template_id, **kwargs)  # noqa: E501
            return data

    def apply_standard_to_template_with_http_info(self, body, template_id, **kwargs):  # noqa: E501
        """Apply a standard to the recommended countermeasures of the template.  # noqa: E501

        Apply a standard to the recommended countermeasures of the template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_standard_to_template_with_http_info(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplyStandardToTemplateRequest body: (required)
        :param str template_id: ID of the template (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_standard_to_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `apply_standard_to_template`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `apply_standard_to_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/apply-standard', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_delete_template_countermeasure(self, x_irius_async, id, **kwargs):  # noqa: E501
        """Deletes a list of countermeasures.  # noqa: E501

        Deletes a list of countermeasures. This operation must be executed with the header X-Irius-Async set to true. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_delete_template_countermeasure(x_irius_async, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :param list[str] id: Unique identifier of the countermeasure. (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_delete_template_countermeasure_with_http_info(x_irius_async, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_delete_template_countermeasure_with_http_info(x_irius_async, id, **kwargs)  # noqa: E501
            return data

    def bulk_delete_template_countermeasure_with_http_info(self, x_irius_async, id, **kwargs):  # noqa: E501
        """Deletes a list of countermeasures.  # noqa: E501

        Deletes a list of countermeasures. This operation must be executed with the header X-Irius-Async set to true. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_delete_template_countermeasure_with_http_info(x_irius_async, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :param list[str] id: Unique identifier of the countermeasure. (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_irius_async', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_delete_template_countermeasure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_irius_async' is set
        if ('x_irius_async' not in params or
                params['x_irius_async'] is None):
            raise ValueError("Missing the required parameter `x_irius_async` when calling `bulk_delete_template_countermeasure`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bulk_delete_template_countermeasure`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_irius_async' in params:
            header_params['X-Irius-Async'] = params['x_irius_async']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_delete_template_threat(self, x_irius_async, id, **kwargs):  # noqa: E501
        """Delete multiple threats by their ids.  # noqa: E501

        Deletes a set of threats. This operation must be executed with the header X-Irius-Async set to true.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted or **TEMPLATE_UPDATE** and visibility over the template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_delete_template_threat(x_irius_async, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :param list[str] id: Unique identifier of the threat. (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_delete_template_threat_with_http_info(x_irius_async, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_delete_template_threat_with_http_info(x_irius_async, id, **kwargs)  # noqa: E501
            return data

    def bulk_delete_template_threat_with_http_info(self, x_irius_async, id, **kwargs):  # noqa: E501
        """Delete multiple threats by their ids.  # noqa: E501

        Deletes a set of threats. This operation must be executed with the header X-Irius-Async set to true.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted or **TEMPLATE_UPDATE** and visibility over the template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_delete_template_threat_with_http_info(x_irius_async, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :param list[str] id: Unique identifier of the threat. (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_irius_async', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_delete_template_threat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_irius_async' is set
        if ('x_irius_async' not in params or
                params['x_irius_async'] is None):
            raise ValueError("Missing the required parameter `x_irius_async` when calling `bulk_delete_template_threat`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bulk_delete_template_threat`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_irius_async' in params:
            header_params['X-Irius-Async'] = params['x_irius_async']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_update_template_countermeasure_priority(self, body, x_irius_async, **kwargs):  # noqa: E501
        """Updates the priority of a list of countermeasures.  # noqa: E501

        Updates the priority of a list of countermeasures. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_template_countermeasure_priority(body, x_irius_async, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[UpdateTemplateCountermeasurePriorityRequest] body: (required)
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_update_template_countermeasure_priority_with_http_info(body, x_irius_async, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_update_template_countermeasure_priority_with_http_info(body, x_irius_async, **kwargs)  # noqa: E501
            return data

    def bulk_update_template_countermeasure_priority_with_http_info(self, body, x_irius_async, **kwargs):  # noqa: E501
        """Updates the priority of a list of countermeasures.  # noqa: E501

        Updates the priority of a list of countermeasures. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_template_countermeasure_priority_with_http_info(body, x_irius_async, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[UpdateTemplateCountermeasurePriorityRequest] body: (required)
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_irius_async']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_update_template_countermeasure_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_update_template_countermeasure_priority`")  # noqa: E501
        # verify the required parameter 'x_irius_async' is set
        if ('x_irius_async' not in params or
                params['x_irius_async'] is None):
            raise ValueError("Missing the required parameter `x_irius_async` when calling `bulk_update_template_countermeasure_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_irius_async' in params:
            header_params['X-Irius-Async'] = params['x_irius_async']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/priority/bulk', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_update_template_countermeasure_state(self, body, x_irius_async, **kwargs):  # noqa: E501
        """Updates the status of a list of countermeasures.  # noqa: E501

        Updates the status of a list of countermeasures. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_template_countermeasure_state(body, x_irius_async, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] body: (required)
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_update_template_countermeasure_state_with_http_info(body, x_irius_async, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_update_template_countermeasure_state_with_http_info(body, x_irius_async, **kwargs)  # noqa: E501
            return data

    def bulk_update_template_countermeasure_state_with_http_info(self, body, x_irius_async, **kwargs):  # noqa: E501
        """Updates the status of a list of countermeasures.  # noqa: E501

        Updates the status of a list of countermeasures. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_template_countermeasure_state_with_http_info(body, x_irius_async, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] body: (required)
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_irius_async']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_update_template_countermeasure_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_update_template_countermeasure_state`")  # noqa: E501
        # verify the required parameter 'x_irius_async' is set
        if ('x_irius_async' not in params or
                params['x_irius_async'] is None):
            raise ValueError("Missing the required parameter `x_irius_async` when calling `bulk_update_template_countermeasure_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_irius_async' in params:
            header_params['X-Irius-Async'] = params['x_irius_async']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/state/bulk', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_update_template_threat_state(self, body, x_irius_async, **kwargs):  # noqa: E501
        """Update multiple threats by their ids.  # noqa: E501

        Updates the status of a set of threats. Allows to execute a state transition for each one of them. This operation must be executed with the header X-Irius-Async set to true. A reason must be given for these transitions: expose, accept or not-applicable.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_template_threat_state(body, x_irius_async, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] body: (required)
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_update_template_threat_state_with_http_info(body, x_irius_async, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_update_template_threat_state_with_http_info(body, x_irius_async, **kwargs)  # noqa: E501
            return data

    def bulk_update_template_threat_state_with_http_info(self, body, x_irius_async, **kwargs):  # noqa: E501
        """Update multiple threats by their ids.  # noqa: E501

        Updates the status of a set of threats. Allows to execute a state transition for each one of them. This operation must be executed with the header X-Irius-Async set to true. A reason must be given for these transitions: expose, accept or not-applicable.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_template_threat_state_with_http_info(body, x_irius_async, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] body: (required)
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_irius_async']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_update_template_threat_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_update_template_threat_state`")  # noqa: E501
        # verify the required parameter 'x_irius_async' is set
        if ('x_irius_async' not in params or
                params['x_irius_async'] is None):
            raise ValueError("Missing the required parameter `x_irius_async` when calling `bulk_update_template_threat_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_irius_async' in params:
            header_params['X-Irius-Async'] = params['x_irius_async']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/state/bulk', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_template_threat_state_by_id(self, body, threat_id, **kwargs):  # noqa: E501
        """Updates the status of a template threat.  # noqa: E501

        Updates the status of a template threat. A reason must be given for these transitions: expose, accept or not-applicable.  Conditions to be able to perform the action are verified in the background, for every threat that must be updated: - To have the permission **TEMPLATE_UPDATE** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, - The transition undo-not-applicable can only be applied to threats currently in the state not-applicable - The template must not be locked - The template must be visible for the user - The template must not be locked or in a read-only state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_template_threat_state_by_id(body, threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThreatidStateBody body: (required)
        :param str threat_id: Unique identifier of the threat. (required)
        :return: TemplateThreatWithCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_template_threat_state_by_id_with_http_info(body, threat_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_template_threat_state_by_id_with_http_info(body, threat_id, **kwargs)  # noqa: E501
            return data

    def change_template_threat_state_by_id_with_http_info(self, body, threat_id, **kwargs):  # noqa: E501
        """Updates the status of a template threat.  # noqa: E501

        Updates the status of a template threat. A reason must be given for these transitions: expose, accept or not-applicable.  Conditions to be able to perform the action are verified in the background, for every threat that must be updated: - To have the permission **TEMPLATE_UPDATE** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, - The transition undo-not-applicable can only be applied to threats currently in the state not-applicable - The template must not be locked - The template must be visible for the user - The template must not be locked or in a read-only state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_template_threat_state_by_id_with_http_info(body, threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThreatidStateBody body: (required)
        :param str threat_id: Unique identifier of the threat. (required)
        :return: TemplateThreatWithCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'threat_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_template_threat_state_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_template_threat_state_by_id`")  # noqa: E501
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `change_template_threat_state_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}/state', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateThreatWithCustomFieldsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_countermeasure_in_template_threat(self, body, **kwargs):  # noqa: E501
        """Copy Countermeasure into template Threat.  # noqa: E501

        Copy an existing Countermeasure into a specified Threat by referencing both entities. By default the State of the Countermeasure will be **RECOMMENDED**. Conditions to be able to perform the action: - Countermeasure must be visible for the User. Extra permissions may be needed depending on the source  The target template must also be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  If the process involves a Weakness, it would be necessary to have the permission to view the Weakness.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_countermeasure_in_template_threat(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyCountermeasureInTemplateThreatRequest body: (required)
        :return: TemplateCountermeasureDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_countermeasure_in_template_threat_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_countermeasure_in_template_threat_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def copy_countermeasure_in_template_threat_with_http_info(self, body, **kwargs):  # noqa: E501
        """Copy Countermeasure into template Threat.  # noqa: E501

        Copy an existing Countermeasure into a specified Threat by referencing both entities. By default the State of the Countermeasure will be **RECOMMENDED**. Conditions to be able to perform the action: - Countermeasure must be visible for the User. Extra permissions may be needed depending on the source  The target template must also be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  If the process involves a Weakness, it would be necessary to have the permission to view the Weakness.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_countermeasure_in_template_threat_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyCountermeasureInTemplateThreatRequest body: (required)
        :return: TemplateCountermeasureDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_countermeasure_in_template_threat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `copy_countermeasure_in_template_threat`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_threat_in_template_use_case(self, body, **kwargs):  # noqa: E501
        """Copy Threat into template Use Case.  # noqa: E501

        Copy an existing Threat into a specified template Use Case. Conditions to be able to perform the action: - Threat must be visible for the User. Extra permissions may be needed depending on the source  The target template must also be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_threat_in_template_use_case(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyThreatInTemplateUseCaseRequest body: (required)
        :return: TemplateThreatWithCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_threat_in_template_use_case_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_threat_in_template_use_case_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def copy_threat_in_template_use_case_with_http_info(self, body, **kwargs):  # noqa: E501
        """Copy Threat into template Use Case.  # noqa: E501

        Copy an existing Threat into a specified template Use Case. Conditions to be able to perform the action: - Threat must be visible for the User. Extra permissions may be needed depending on the source  The target template must also be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_threat_in_template_use_case_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyThreatInTemplateUseCaseRequest body: (required)
        :return: TemplateThreatWithCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_threat_in_template_use_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `copy_threat_in_template_use_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateThreatWithCustomFieldsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_weakness_in_template_threat(self, body, **kwargs):  # noqa: E501
        """Copy Weakness into template Threat.  # noqa: E501

        Copy an existing weakness into a specified template threat. Conditions to be able to perform the action: - Weakness must be visible for the User. Extra permissions may be needed depending on the source  The target template must also be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_weakness_in_template_threat(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyWeaknessInTemplateThreatRequest body: (required)
        :return: TemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_weakness_in_template_threat_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_weakness_in_template_threat_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def copy_weakness_in_template_threat_with_http_info(self, body, **kwargs):  # noqa: E501
        """Copy Weakness into template Threat.  # noqa: E501

        Copy an existing weakness into a specified template threat. Conditions to be able to perform the action: - Weakness must be visible for the User. Extra permissions may be needed depending on the source  The target template must also be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_weakness_in_template_threat_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyWeaknessInTemplateThreatRequest body: (required)
        :return: TemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_weakness_in_template_threat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `copy_weakness_in_template_threat`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateWeaknessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template(self, body, **kwargs):  # noqa: E501
        """Create a new template.  # noqa: E501

        Create a new template.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateRequest body: Payload to create a template. (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new template.  # noqa: E501

        Create a new template.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateRequest body: Payload to create a template. (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_countermeasure(self, body, **kwargs):  # noqa: E501
        """Create a Template Countermeasure.  # noqa: E501

        Creates a new countermeasure within a template, specifying its details. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureRequest body: (required)
        :return: TemplateCountermeasureDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_countermeasure_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_countermeasure_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_countermeasure_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Template Countermeasure.  # noqa: E501

        Creates a new countermeasure within a template, specifying its details. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureRequest body: (required)
        :return: TemplateCountermeasureDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_countermeasure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_countermeasure`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_countermeasure_comment(self, body, **kwargs):  # noqa: E501
        """Creates a new comment for a countermeasure.  # noqa: E501

        Creates a new comment for a countermeasure. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure_comment(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureCommentRequest body: (required)
        :return: TemplateCountermeasureCommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_countermeasure_comment_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_countermeasure_comment_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_countermeasure_comment_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a new comment for a countermeasure.  # noqa: E501

        Creates a new comment for a countermeasure. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure_comment_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureCommentRequest body: (required)
        :return: TemplateCountermeasureCommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_countermeasure_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_countermeasure_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureCommentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_countermeasure_implementation(self, body, **kwargs):  # noqa: E501
        """Creates a new countermeasure implementation.  # noqa: E501

        Creates a new countermeasure implementation. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure_implementation(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureImplementationRequest body: (required)
        :return: TemplateCountermeasureImplementationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_countermeasure_implementation_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_countermeasure_implementation_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_countermeasure_implementation_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a new countermeasure implementation.  # noqa: E501

        Creates a new countermeasure implementation. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure_implementation_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureImplementationRequest body: (required)
        :return: TemplateCountermeasureImplementationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_countermeasure_implementation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_countermeasure_implementation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/implementations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureImplementationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_countermeasure_reference(self, body, **kwargs):  # noqa: E501
        """Creates a reference for a countermeasure.  # noqa: E501

        Creates a reference for a countermeasure. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure_reference(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureReferenceRequest body: (required)
        :return: TemplateCountermeasureReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_countermeasure_reference_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_countermeasure_reference_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_countermeasure_reference_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a reference for a countermeasure.  # noqa: E501

        Creates a reference for a countermeasure. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure_reference_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureReferenceRequest body: (required)
        :return: TemplateCountermeasureReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_countermeasure_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_countermeasure_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/references', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_countermeasure_standard_reference(self, body, **kwargs):  # noqa: E501
        """Creates a template countermeasure standard reference.  # noqa: E501

        Creates a template countermeasure standard reference. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted, or</li> - To have the permission **TEMPLATE_UPDATE** granted.</li>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure_standard_reference(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureStandardReferenceRequest body: (required)
        :return: TemplateCountermeasureStandardReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_countermeasure_standard_reference_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_countermeasure_standard_reference_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_countermeasure_standard_reference_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a template countermeasure standard reference.  # noqa: E501

        Creates a template countermeasure standard reference. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted, or</li> - To have the permission **TEMPLATE_UPDATE** granted.</li>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure_standard_reference_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureStandardReferenceRequest body: (required)
        :return: TemplateCountermeasureStandardReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_countermeasure_standard_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_countermeasure_standard_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/standard-references', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureStandardReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_countermeasure_test_reference(self, body, **kwargs):  # noqa: E501
        """Creates a new reference related to a countermeasure test.  # noqa: E501

        Creates a new reference related to a countermeasure test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure_test_reference(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureTestReferenceRequest body: (required)
        :return: GetTemplateCountermeasureTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_countermeasure_test_reference_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_countermeasure_test_reference_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_countermeasure_test_reference_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a new reference related to a countermeasure test.  # noqa: E501

        Creates a new reference related to a countermeasure test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_countermeasure_test_reference_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateCountermeasureTestReferenceRequest body: (required)
        :return: GetTemplateCountermeasureTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_countermeasure_test_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_countermeasure_test_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/tests/references', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTemplateCountermeasureTestReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_from_project(self, body, project_id, **kwargs):  # noqa: E501
        """Create a new template based on a project.  # noqa: E501

        Create a new template based on a project. Conditions to be able to perform the action: - To have the permission **PRODUCT_UPDATE** granted. - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_from_project(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateFromProjectRequest body: Payload to create a template from a project. (required)
        :param str project_id: ID of the project (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_from_project_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_from_project_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def create_template_from_project_with_http_info(self, body, project_id, **kwargs):  # noqa: E501
        """Create a new template based on a project.  # noqa: E501

        Create a new template based on a project. Conditions to be able to perform the action: - To have the permission **PRODUCT_UPDATE** granted. - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_from_project_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateFromProjectRequest body: Payload to create a template from a project. (required)
        :param str project_id: ID of the project (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_from_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_from_project`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_template_from_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project-id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/create-from-project/{project-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_threat(self, body, **kwargs):  # noqa: E501
        """Create a new Threat.  # noqa: E501

        Create a new Threat. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_threat(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateThreatRequest body: (required)
        :return: TemplateThreatWithCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_threat_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_threat_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_threat_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new Threat.  # noqa: E501

        Create a new Threat. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_threat_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateThreatRequest body: (required)
        :return: TemplateThreatWithCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_threat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_threat`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateThreatWithCustomFieldsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_threat_comment(self, body, **kwargs):  # noqa: E501
        """Create a new comment for a threat.  # noqa: E501

        Creates a new comment for a threat. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_threat_comment(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateThreatCommentRequest body: (required)
        :return: TemplateThreatCommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_threat_comment_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_threat_comment_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_threat_comment_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new comment for a threat.  # noqa: E501

        Creates a new comment for a threat. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_threat_comment_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateThreatCommentRequest body: (required)
        :return: TemplateThreatCommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_threat_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_threat_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateThreatCommentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_threat_reference(self, body, **kwargs):  # noqa: E501
        """Creates a new threat reference.  # noqa: E501

        Creates a new threat reference. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_threat_reference(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateThreatReferenceRequest body: (required)
        :return: TemplateThreatReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_threat_reference_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_threat_reference_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_threat_reference_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a new threat reference.  # noqa: E501

        Creates a new threat reference. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_threat_reference_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateThreatReferenceRequest body: (required)
        :return: TemplateThreatReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_threat_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_threat_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/references', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateThreatReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_use_case(self, body, **kwargs):  # noqa: E501
        """Create a use case.  # noqa: E501

        Create a use case. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_use_case(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateUseCaseRequest body: (required)
        :return: TemplateUseCaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_use_case_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_use_case_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_use_case_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a use case.  # noqa: E501

        Create a use case. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_use_case_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateUseCaseRequest body: (required)
        :return: TemplateUseCaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_use_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_use_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/use-cases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateUseCaseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_weakness_test_reference(self, body, **kwargs):  # noqa: E501
        """Creates a new reference related to a weakness test.  # noqa: E501

        Creates a new reference related to a weakness test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_weakness_test_reference(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateWeaknessTestReferenceRequest body: (required)
        :return: GetTemplateWeaknessTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_weakness_test_reference_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_weakness_test_reference_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_weakness_test_reference_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a new reference related to a weakness test.  # noqa: E501

        Creates a new reference related to a weakness test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_weakness_test_reference_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateWeaknessTestReferenceRequest body: (required)
        :return: GetTemplateWeaknessTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_weakness_test_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_weakness_test_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/tests/references', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTemplateWeaknessTestReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crete_template_weakness(self, body, **kwargs):  # noqa: E501
        """Creates the weakness.  # noqa: E501

        Creates the weakness. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted, or</li><li> To have the permission **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crete_template_weakness(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateWeaknessRequest body: (required)
        :return: TemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crete_template_weakness_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.crete_template_weakness_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def crete_template_weakness_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates the weakness.  # noqa: E501

        Creates the weakness. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted, or</li><li> To have the permission **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crete_template_weakness_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateWeaknessRequest body: (required)
        :return: TemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crete_template_weakness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crete_template_weakness`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateWeaknessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_by_id(self, template_id, **kwargs):  # noqa: E501
        """Delete the template.  # noqa: E501

        Delete the template that matches the id.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted to delete own templates. - To have the permission **TEMPLATE_UPDATE_ALL** granted to delete any templates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_by_id(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def delete_template_by_id_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Delete the template.  # noqa: E501

        Delete the template that matches the id.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted to delete own templates. - To have the permission **TEMPLATE_UPDATE_ALL** granted to delete any templates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_by_id_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `delete_template_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_countermeasure(self, countermeasure_id, **kwargs):  # noqa: E501
        """Delete a Template Countermeasure.  # noqa: E501

        Deletes an existing template countermeasure using its ID. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_countermeasure_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_countermeasure_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
            return data

    def delete_template_countermeasure_with_http_info(self, countermeasure_id, **kwargs):  # noqa: E501
        """Delete a Template Countermeasure.  # noqa: E501

        Deletes an existing template countermeasure using its ID. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_with_http_info(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['countermeasure_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_countermeasure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `delete_template_countermeasure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/{countermeasure-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_countermeasure_by_threat(self, threat_id, countermeasure_id, **kwargs):  # noqa: E501
        """Delete a countermeasure belongs to a threat.  # noqa: E501

        Delete a countermeasure belongs to a threat. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted or - To have the permission **TEMPLATE_UPDATE** granted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_by_threat(threat_id, countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_countermeasure_by_threat_with_http_info(threat_id, countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_countermeasure_by_threat_with_http_info(threat_id, countermeasure_id, **kwargs)  # noqa: E501
            return data

    def delete_template_countermeasure_by_threat_with_http_info(self, threat_id, countermeasure_id, **kwargs):  # noqa: E501
        """Delete a countermeasure belongs to a threat.  # noqa: E501

        Delete a countermeasure belongs to a threat. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted or - To have the permission **TEMPLATE_UPDATE** granted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_by_threat_with_http_info(threat_id, countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_id', 'countermeasure_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_countermeasure_by_threat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `delete_template_countermeasure_by_threat`")  # noqa: E501
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `delete_template_countermeasure_by_threat`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}/countermeasures/{countermeasure-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_countermeasure_by_weakness(self, weakness_id, countermeasure_id, **kwargs):  # noqa: E501
        """Delete a countermeasure belongs to a weakness.  # noqa: E501

        Delete a countermeasure belongs to a weakness. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted or - To have the permission **TEMPLATE_UPDATE** granted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_by_weakness(weakness_id, countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weakness_id: ID of the weakness (required)
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_countermeasure_by_weakness_with_http_info(weakness_id, countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_countermeasure_by_weakness_with_http_info(weakness_id, countermeasure_id, **kwargs)  # noqa: E501
            return data

    def delete_template_countermeasure_by_weakness_with_http_info(self, weakness_id, countermeasure_id, **kwargs):  # noqa: E501
        """Delete a countermeasure belongs to a weakness.  # noqa: E501

        Delete a countermeasure belongs to a weakness. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted or - To have the permission **TEMPLATE_UPDATE** granted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_by_weakness_with_http_info(weakness_id, countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weakness_id: ID of the weakness (required)
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['weakness_id', 'countermeasure_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_countermeasure_by_weakness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'weakness_id' is set
        if ('weakness_id' not in params or
                params['weakness_id'] is None):
            raise ValueError("Missing the required parameter `weakness_id` when calling `delete_template_countermeasure_by_weakness`")  # noqa: E501
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `delete_template_countermeasure_by_weakness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'weakness_id' in params:
            path_params['weakness-id'] = params['weakness_id']  # noqa: E501
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/{weakness-id}/countermeasures/{countermeasure-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_countermeasure_implementation(self, implementation_id, **kwargs):  # noqa: E501
        """Deletes a countermeasure implementation.  # noqa: E501

        Deletes a countermeasure implementation. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_implementation(implementation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str implementation_id: The id of the countermeasure implementation. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_countermeasure_implementation_with_http_info(implementation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_countermeasure_implementation_with_http_info(implementation_id, **kwargs)  # noqa: E501
            return data

    def delete_template_countermeasure_implementation_with_http_info(self, implementation_id, **kwargs):  # noqa: E501
        """Deletes a countermeasure implementation.  # noqa: E501

        Deletes a countermeasure implementation. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_implementation_with_http_info(implementation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str implementation_id: The id of the countermeasure implementation. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['implementation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_countermeasure_implementation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'implementation_id' is set
        if ('implementation_id' not in params or
                params['implementation_id'] is None):
            raise ValueError("Missing the required parameter `implementation_id` when calling `delete_template_countermeasure_implementation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'implementation_id' in params:
            path_params['implementation-id'] = params['implementation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/implementations/{implementation-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_countermeasure_reference(self, reference_id, **kwargs):  # noqa: E501
        """Deletes a reference for a countermeasure.  # noqa: E501

        Deletes a reference for a countermeasure. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_reference(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: The id of the countermeasure reference. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_countermeasure_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_countermeasure_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
            return data

    def delete_template_countermeasure_reference_with_http_info(self, reference_id, **kwargs):  # noqa: E501
        """Deletes a reference for a countermeasure.  # noqa: E501

        Deletes a reference for a countermeasure. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_reference_with_http_info(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: The id of the countermeasure reference. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_countermeasure_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `delete_template_countermeasure_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/references/{reference-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_countermeasure_standard_reference(self, standard_reference_id, **kwargs):  # noqa: E501
        """Deletes a template countermeasure standard reference.  # noqa: E501

        Deletes a template countermeasure standard reference. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted, or</li> - To have the permission **TEMPLATE_UPDATE** granted.</li>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_standard_reference(standard_reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str standard_reference_id: ID of the template countermeasure standard reference (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_countermeasure_standard_reference_with_http_info(standard_reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_countermeasure_standard_reference_with_http_info(standard_reference_id, **kwargs)  # noqa: E501
            return data

    def delete_template_countermeasure_standard_reference_with_http_info(self, standard_reference_id, **kwargs):  # noqa: E501
        """Deletes a template countermeasure standard reference.  # noqa: E501

        Deletes a template countermeasure standard reference. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted, or</li> - To have the permission **TEMPLATE_UPDATE** granted.</li>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_standard_reference_with_http_info(standard_reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str standard_reference_id: ID of the template countermeasure standard reference (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['standard_reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_countermeasure_standard_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'standard_reference_id' is set
        if ('standard_reference_id' not in params or
                params['standard_reference_id'] is None):
            raise ValueError("Missing the required parameter `standard_reference_id` when calling `delete_template_countermeasure_standard_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'standard_reference_id' in params:
            path_params['standard-reference-id'] = params['standard_reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/standard-references/{standard-reference-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_countermeasure_test_reference(self, reference_id, **kwargs):  # noqa: E501
        """Deletes a reference for a countermeasure test.  # noqa: E501

        Deletes a reference for a countermeasure test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_test_reference(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: The id of the countermeasure test reference. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_countermeasure_test_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_countermeasure_test_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
            return data

    def delete_template_countermeasure_test_reference_with_http_info(self, reference_id, **kwargs):  # noqa: E501
        """Deletes a reference for a countermeasure test.  # noqa: E501

        Deletes a reference for a countermeasure test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_countermeasure_test_reference_with_http_info(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: The id of the countermeasure test reference. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_countermeasure_test_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `delete_template_countermeasure_test_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/tests/references/{reference-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_threat_by_id(self, threat_id, **kwargs):  # noqa: E501
        """Delete a Threat by its ID  # noqa: E501

        This operation allows the deletion of a specific threat identified by its unique ID. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_threat_by_id(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_threat_by_id_with_http_info(threat_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_threat_by_id_with_http_info(threat_id, **kwargs)  # noqa: E501
            return data

    def delete_template_threat_by_id_with_http_info(self, threat_id, **kwargs):  # noqa: E501
        """Delete a Threat by its ID  # noqa: E501

        This operation allows the deletion of a specific threat identified by its unique ID. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_threat_by_id_with_http_info(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_threat_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `delete_template_threat_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_threat_reference(self, reference_id, **kwargs):  # noqa: E501
        """Deletes a threat reference.  # noqa: E501

        Deletes a threat reference. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_threat_reference(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: ID of a reference. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_threat_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_threat_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
            return data

    def delete_template_threat_reference_with_http_info(self, reference_id, **kwargs):  # noqa: E501
        """Deletes a threat reference.  # noqa: E501

        Deletes a threat reference. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_threat_reference_with_http_info(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: ID of a reference. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_threat_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `delete_template_threat_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/references/{reference-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_use_case(self, use_case_id, **kwargs):  # noqa: E501
        """Delete a use case.  # noqa: E501

        Delete a use case. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_use_case(use_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str use_case_id: ID of the use case. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_use_case_with_http_info(use_case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_use_case_with_http_info(use_case_id, **kwargs)  # noqa: E501
            return data

    def delete_template_use_case_with_http_info(self, use_case_id, **kwargs):  # noqa: E501
        """Delete a use case.  # noqa: E501

        Delete a use case. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_use_case_with_http_info(use_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str use_case_id: ID of the use case. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['use_case_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_use_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'use_case_id' is set
        if ('use_case_id' not in params or
                params['use_case_id'] is None):
            raise ValueError("Missing the required parameter `use_case_id` when calling `delete_template_use_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'use_case_id' in params:
            path_params['use-case-id'] = params['use_case_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/use-cases/{use-case-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_weakness(self, threat_id, weakness_id, **kwargs):  # noqa: E501
        """Deletes the weakness.  # noqa: E501

        Deletes the weakness. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted, or</li><li> To have the permission **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_weakness(threat_id, weakness_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param str weakness_id: ID of the weakness (required)
        :return: TemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_weakness_with_http_info(threat_id, weakness_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_weakness_with_http_info(threat_id, weakness_id, **kwargs)  # noqa: E501
            return data

    def delete_template_weakness_with_http_info(self, threat_id, weakness_id, **kwargs):  # noqa: E501
        """Deletes the weakness.  # noqa: E501

        Deletes the weakness. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted, or</li><li> To have the permission **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_weakness_with_http_info(threat_id, weakness_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param str weakness_id: ID of the weakness (required)
        :return: TemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_id', 'weakness_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_weakness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `delete_template_weakness`")  # noqa: E501
        # verify the required parameter 'weakness_id' is set
        if ('weakness_id' not in params or
                params['weakness_id'] is None):
            raise ValueError("Missing the required parameter `weakness_id` when calling `delete_template_weakness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501
        if 'weakness_id' in params:
            path_params['weakness-id'] = params['weakness_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}/weaknesses/{weakness-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateWeaknessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_weakness_test_reference(self, reference_id, **kwargs):  # noqa: E501
        """Deletes a reference for a weakness test.  # noqa: E501

        Deletes a reference for a weakness test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_weakness_test_reference(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: ID of the weakness test reference. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_weakness_test_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_weakness_test_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
            return data

    def delete_template_weakness_test_reference_with_http_info(self, reference_id, **kwargs):  # noqa: E501
        """Deletes a reference for a weakness test.  # noqa: E501

        Deletes a reference for a weakness test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_weakness_test_reference_with_http_info(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: ID of the weakness test reference. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_weakness_test_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `delete_template_weakness_test_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/tests/references/{reference-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_template(self, template_id, **kwargs):  # noqa: E501
        """Export the information of a template in XML format.  # noqa: E501

        Export the information of a template in XML format.  Conditions to be able to perform the action:  - To have the permission **TEMPLATE_UPDATE_ALL** granted or  - To have visibility over the template and the permission **TEMPLATE_UPDATE**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_template(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_template_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.export_template_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def export_template_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Export the information of a template in XML format.  # noqa: E501

        Export the information of a template in XML format.  Conditions to be able to perform the action:  - To have the permission **TEMPLATE_UPDATE_ALL** granted or  - To have visibility over the template and the permission **TEMPLATE_UPDATE**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_template_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `export_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_template_countermeasures(self, body, template_id, **kwargs):  # noqa: E501
        """Export the countermeasures of a template, based on filters.  # noqa: E501

        <p>Export the countermeasures of a template, based on filters.</p><p>The allowed formats for the data can be specified by using the Accept header in the request. Here are the formats you can choose from:</p><ul><li><strong>text/csv</strong> for CSV files.</li><li><strong>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</strong> for modern Excel files (.xlsx).</li><li><strong>application/vnd.ms-excel</strong> for older Excel files (.xls).</li></ul><p>When making your request, include the Accept header and specify one of these formats to determine how you'd like to receive the data.</p><p>Conditions to be able to perform the action:</p><ul><li>To have the permission <strong>TEMPLATE_UPDATE</strong> granted or</li><li>To have the permission <strong>TEMPLATE_UPDATE_ALL</strong> granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_template_countermeasures(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportTemplateCountermeasureQueryRequest body: (required)
        :param str template_id: ID of the template (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_template_countermeasures_with_http_info(body, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.export_template_countermeasures_with_http_info(body, template_id, **kwargs)  # noqa: E501
            return data

    def export_template_countermeasures_with_http_info(self, body, template_id, **kwargs):  # noqa: E501
        """Export the countermeasures of a template, based on filters.  # noqa: E501

        <p>Export the countermeasures of a template, based on filters.</p><p>The allowed formats for the data can be specified by using the Accept header in the request. Here are the formats you can choose from:</p><ul><li><strong>text/csv</strong> for CSV files.</li><li><strong>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</strong> for modern Excel files (.xlsx).</li><li><strong>application/vnd.ms-excel</strong> for older Excel files (.xls).</li></ul><p>When making your request, include the Accept header and specify one of these formats to determine how you'd like to receive the data.</p><p>Conditions to be able to perform the action:</p><ul><li>To have the permission <strong>TEMPLATE_UPDATE</strong> granted or</li><li>To have the permission <strong>TEMPLATE_UPDATE_ALL</strong> granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_template_countermeasures_with_http_info(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportTemplateCountermeasureQueryRequest body: (required)
        :param str template_id: ID of the template (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_template_countermeasures" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `export_template_countermeasures`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `export_template_countermeasures`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/countermeasures/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_template_threats(self, body, template_id, **kwargs):  # noqa: E501
        """Exports the threats of a template, based on filters.  # noqa: E501

        <p>Exports the threats of a template, based on filters.</p><p>The allowed formats for the data can be specified by using the Accept header in the request. Here are the formats you can choose from:</p><ul><li><strong>text/csv</strong> for CSV files.</li><li><strong>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</strong> for modern Excel files (.xlsx).</li><li><strong>application/vnd.ms-excel</strong> for older Excel files (.xls).</li></ul><p>When making your request, include the Accept header and specify one of these formats to determine how you'd like to receive the data.</p><p>Conditions to be able to perform the action:</p><ul><li>To have the permission <strong>TEMPLATE_UPDATE</strong> granted or</li><li>To have the permission <strong>TEMPLATE_UPDATE_ALL</strong> granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_template_threats(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportTemplateThreatQueryRequest body: <p>The <strong>RequestBody</strong> currently includes the <strong>filters</strong> property, which serves as a placeholder for future enhancements. As of now, the <strong>all</strong> property is supported, functioning as an AND condition where all specified filters must match.</p>

<p><strong>Current functionality:</strong></p>
<ul>
  <li><strong>all</strong>: When this property is used, all of the filters included must match for the request to be processed. This is equivalent to an AND condition in logical operations.</li>
</ul>

<p><strong>Example:</strong> If a request body specifies filters for <strong>states</strong> as <strong>["required", "implemented"]</strong> and <strong>tags</strong> as <strong>["tag1", "tag2"]</strong>, then only items that are both in the 'required' or 'implemented' states and tagged with 'tag1' or 'tag2' will match.</p>

<pre>
{
  "all": {
    "states": ["required", "implemented"],
    "tags": ["tag1", "tag2"]
  }
}
</pre>

 (required)
        :param str template_id: ID of the template (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_template_threats_with_http_info(body, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.export_template_threats_with_http_info(body, template_id, **kwargs)  # noqa: E501
            return data

    def export_template_threats_with_http_info(self, body, template_id, **kwargs):  # noqa: E501
        """Exports the threats of a template, based on filters.  # noqa: E501

        <p>Exports the threats of a template, based on filters.</p><p>The allowed formats for the data can be specified by using the Accept header in the request. Here are the formats you can choose from:</p><ul><li><strong>text/csv</strong> for CSV files.</li><li><strong>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</strong> for modern Excel files (.xlsx).</li><li><strong>application/vnd.ms-excel</strong> for older Excel files (.xls).</li></ul><p>When making your request, include the Accept header and specify one of these formats to determine how you'd like to receive the data.</p><p>Conditions to be able to perform the action:</p><ul><li>To have the permission <strong>TEMPLATE_UPDATE</strong> granted or</li><li>To have the permission <strong>TEMPLATE_UPDATE_ALL</strong> granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_template_threats_with_http_info(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportTemplateThreatQueryRequest body: <p>The <strong>RequestBody</strong> currently includes the <strong>filters</strong> property, which serves as a placeholder for future enhancements. As of now, the <strong>all</strong> property is supported, functioning as an AND condition where all specified filters must match.</p>

<p><strong>Current functionality:</strong></p>
<ul>
  <li><strong>all</strong>: When this property is used, all of the filters included must match for the request to be processed. This is equivalent to an AND condition in logical operations.</li>
</ul>

<p><strong>Example:</strong> If a request body specifies filters for <strong>states</strong> as <strong>["required", "implemented"]</strong> and <strong>tags</strong> as <strong>["tag1", "tag2"]</strong>, then only items that are both in the 'required' or 'implemented' states and tagged with 'tag1' or 'tag2' will match.</p>

<pre>
{
  "all": {
    "states": ["required", "implemented"],
    "tags": ["tag1", "tag2"]
  }
}
</pre>

 (required)
        :param str template_id: ID of the template (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_template_threats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `export_template_threats`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `export_template_threats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/threats/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_countermeasures_by_template(self, template_id, **kwargs):  # noqa: E501
        """Gets all countermeasures for a template.  # noqa: E501

        Gets all countermeasures for a template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_countermeasures_by_template(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_countermeasures_by_template_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_countermeasures_by_template_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_all_countermeasures_by_template_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Gets all countermeasures for a template.  # noqa: E501

        Gets all countermeasures for a template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_countermeasures_by_template_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_countermeasures_by_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_all_countermeasures_by_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/countermeasures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateCountermeasureResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_standard_references_by_template_countermeasure_uuid(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets all the standard references associated with a given countermeasure in a template context.  # noqa: E501

        Gets all the standard references associated with a given countermeasure in a template context registered in the system. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_standard_references_by_template_countermeasure_uuid(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: ID of the countermeasure (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureStandardReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_standard_references_by_template_countermeasure_uuid_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_standard_references_by_template_countermeasure_uuid_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
            return data

    def get_all_standard_references_by_template_countermeasure_uuid_with_http_info(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets all the standard references associated with a given countermeasure in a template context.  # noqa: E501

        Gets all the standard references associated with a given countermeasure in a template context registered in the system. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_standard_references_by_template_countermeasure_uuid_with_http_info(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: ID of the countermeasure (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureStandardReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['countermeasure_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_standard_references_by_template_countermeasure_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `get_all_standard_references_by_template_countermeasure_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/{countermeasure-id}/standard-references', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateCountermeasureStandardReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_standards_by_template_id(self, template_id, **kwargs):  # noqa: E501
        """Returns all available security standards for the template.  # noqa: E501

        Returns all available security standards for the template. Conditions to be able to perform the action:  - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_standards_by_template_id(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateStandardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_standards_by_template_id_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_standards_by_template_id_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_all_standards_by_template_id_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Returns all available security standards for the template.  # noqa: E501

        Returns all available security standards for the template. Conditions to be able to perform the action:  - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_standards_by_template_id_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateStandardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_standards_by_template_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_all_standards_by_template_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/standards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateStandardResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_artifacts(self, template_id, **kwargs):  # noqa: E501
        """Get the available artifacts for a template.  # noqa: E501

        For a template id get the available artifacts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_artifacts(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_artifacts_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_artifacts_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_artifacts_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Get the available artifacts for a template.  # noqa: E501

        For a template id get the available artifacts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_artifacts_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_artifacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_all_template_artifacts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/artifacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelArtifactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_countermeasure_comments(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets the comments of a countermeasure.  # noqa: E501

        Gets the comments of a countermeasure. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasure_comments(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: The id of the countermeasure. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: TemplateCountermeasureCommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_countermeasure_comments_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_countermeasure_comments_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_countermeasure_comments_with_http_info(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets the comments of a countermeasure.  # noqa: E501

        Gets the comments of a countermeasure. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasure_comments_with_http_info(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: The id of the countermeasure. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: TemplateCountermeasureCommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['countermeasure_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_countermeasure_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `get_all_template_countermeasure_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/{countermeasure-id}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureCommentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_countermeasure_implementations(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets all the countermeasure implementations.  # noqa: E501

        Gets all the countermeasure implementations. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasure_implementations(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: The id of the countermeasure. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureImplementationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_countermeasure_implementations_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_countermeasure_implementations_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_countermeasure_implementations_with_http_info(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets all the countermeasure implementations.  # noqa: E501

        Gets all the countermeasure implementations. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasure_implementations_with_http_info(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: The id of the countermeasure. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureImplementationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['countermeasure_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_countermeasure_implementations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `get_all_template_countermeasure_implementations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/{countermeasure-id}/implementations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateCountermeasureImplementationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_countermeasure_references(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets all the countermeasure references.  # noqa: E501

        Gets all the countermeasure references. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasure_references(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: The id of the countermeasure. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_countermeasure_references_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_countermeasure_references_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_countermeasure_references_with_http_info(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets all the countermeasure references.  # noqa: E501

        Gets all the countermeasure references. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasure_references_with_http_info(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: The id of the countermeasure. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['countermeasure_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_countermeasure_references" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `get_all_template_countermeasure_references`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/{countermeasure-id}/references', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateCountermeasureReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_countermeasure_test_references(self, test_id, **kwargs):  # noqa: E501
        """Gets the list of references related to a countermeasure test.  # noqa: E501

        Gets the list of references related to a countermeasure test.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasure_test_references(test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_id: The id of the countermeasure test. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelGetTemplateCountermeasureTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_countermeasure_test_references_with_http_info(test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_countermeasure_test_references_with_http_info(test_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_countermeasure_test_references_with_http_info(self, test_id, **kwargs):  # noqa: E501
        """Gets the list of references related to a countermeasure test.  # noqa: E501

        Gets the list of references related to a countermeasure test.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasure_test_references_with_http_info(test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_id: The id of the countermeasure test. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelGetTemplateCountermeasureTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_countermeasure_test_references" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `get_all_template_countermeasure_test_references`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_id' in params:
            path_params['test-id'] = params['test_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/tests/{test-id}/references', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelGetTemplateCountermeasureTestReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_countermeasures(self, **kwargs):  # noqa: E501
        """Get all countermeasures for visible templates.  # noqa: E501

        Get all countermeasures for visible templates. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasures(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_countermeasures_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_countermeasures_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_template_countermeasures_with_http_info(self, **kwargs):  # noqa: E501
        """Get all countermeasures for visible templates.  # noqa: E501

        Get all countermeasures for visible templates. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasures_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_countermeasures" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateCountermeasureResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_countermeasures_by_threat(self, threat_id, **kwargs):  # noqa: E501
        """Retrieves all the countermeasures for a template threat.  # noqa: E501

        Retrieves all the countermeasures for a template threat.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasures_by_threat(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureForThreatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_countermeasures_by_threat_with_http_info(threat_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_countermeasures_by_threat_with_http_info(threat_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_countermeasures_by_threat_with_http_info(self, threat_id, **kwargs):  # noqa: E501
        """Retrieves all the countermeasures for a template threat.  # noqa: E501

        Retrieves all the countermeasures for a template threat.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasures_by_threat_with_http_info(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureForThreatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_countermeasures_by_threat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `get_all_template_countermeasures_by_threat`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}/countermeasures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateCountermeasureForThreatResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_countermeasures_by_weakness(self, weakness_id, **kwargs):  # noqa: E501
        """Retrieves all the countermeasures for a template weakness.  # noqa: E501

        Retrieves all the countermeasures for a template weakness. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasures_by_weakness(weakness_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weakness_id: ID of the weakness (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureForWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_countermeasures_by_weakness_with_http_info(weakness_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_countermeasures_by_weakness_with_http_info(weakness_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_countermeasures_by_weakness_with_http_info(self, weakness_id, **kwargs):  # noqa: E501
        """Retrieves all the countermeasures for a template weakness.  # noqa: E501

        Retrieves all the countermeasures for a template weakness. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_countermeasures_by_weakness_with_http_info(weakness_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weakness_id: ID of the weakness (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateCountermeasureForWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['weakness_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_countermeasures_by_weakness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'weakness_id' is set
        if ('weakness_id' not in params or
                params['weakness_id'] is None):
            raise ValueError("Missing the required parameter `weakness_id` when calling `get_all_template_countermeasures_by_weakness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'weakness_id' in params:
            path_params['weakness-id'] = params['weakness_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/{weakness-id}/countermeasures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateCountermeasureForWeaknessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_diagram_categories(self, template_id, **kwargs):  # noqa: E501
        """Provides the categories from a template's diagram metadata.  # noqa: E501

        Provides the categories from a template's diagram metadata. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted or - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_diagram_categories(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelDiagramCategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_diagram_categories_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_diagram_categories_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_diagram_categories_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Provides the categories from a template's diagram metadata.  # noqa: E501

        Provides the categories from a template's diagram metadata. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted or - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_diagram_categories_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelDiagramCategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_diagram_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_all_template_diagram_categories`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/diagram/metadata/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelDiagramCategoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_diagram_components1(self, template_id, category, **kwargs):  # noqa: E501
        """Provides the components from a template's diagram metadata.  # noqa: E501

        Provides the components from a template's diagram metadata. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted or - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_diagram_components1(template_id, category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str category: Category of the component (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelDiagramComponentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_diagram_components1_with_http_info(template_id, category, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_diagram_components1_with_http_info(template_id, category, **kwargs)  # noqa: E501
            return data

    def get_all_template_diagram_components1_with_http_info(self, template_id, category, **kwargs):  # noqa: E501
        """Provides the components from a template's diagram metadata.  # noqa: E501

        Provides the components from a template's diagram metadata. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted or - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_diagram_components1_with_http_info(template_id, category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str category: Category of the component (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelDiagramComponentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'category', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_diagram_components1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_all_template_diagram_components1`")  # noqa: E501
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `get_all_template_diagram_components1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/diagram/metadata/components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelDiagramComponentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_diagram_risk_patterns(self, template_id, component_id, **kwargs):  # noqa: E501
        """Provides the risk patterns of a component from the metadata of a template diagram.  # noqa: E501

        Provides the risk patterns of a component from the metadata of a template diagram. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted or - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_diagram_risk_patterns(template_id, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str component_id: ID of the component (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelDiagramRiskPatternResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_diagram_risk_patterns_with_http_info(template_id, component_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_diagram_risk_patterns_with_http_info(template_id, component_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_diagram_risk_patterns_with_http_info(self, template_id, component_id, **kwargs):  # noqa: E501
        """Provides the risk patterns of a component from the metadata of a template diagram.  # noqa: E501

        Provides the risk patterns of a component from the metadata of a template diagram. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted or - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_diagram_risk_patterns_with_http_info(template_id, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str component_id: ID of the component (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelDiagramRiskPatternResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'component_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_diagram_risk_patterns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_all_template_diagram_risk_patterns`")  # noqa: E501
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params or
                params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `get_all_template_diagram_risk_patterns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501
        if 'component_id' in params:
            path_params['component-id'] = params['component_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/diagram/metadata/components/{component-id}/risk-patterns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelDiagramRiskPatternResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_diagram_trustzones(self, template_id, **kwargs):  # noqa: E501
        """Provides the trustzones from a template's diagram metadata.  # noqa: E501

        Provides the trustzones from a template's diagram metadata. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted or - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_diagram_trustzones(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelDiagramTrustzoneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_diagram_trustzones_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_diagram_trustzones_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_diagram_trustzones_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Provides the trustzones from a template's diagram metadata.  # noqa: E501

        Provides the trustzones from a template's diagram metadata. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted or - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_diagram_trustzones_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelDiagramTrustzoneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_diagram_trustzones" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_all_template_diagram_trustzones`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/diagram/metadata/trust-zones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelDiagramTrustzoneResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_threat_comments(self, threat_id, **kwargs):  # noqa: E501
        """Gets the comments of a threat.  # noqa: E501

        Gets the comments of a threat. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_threat_comments(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateThreatCommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_threat_comments_with_http_info(threat_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_threat_comments_with_http_info(threat_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_threat_comments_with_http_info(self, threat_id, **kwargs):  # noqa: E501
        """Gets the comments of a threat.  # noqa: E501

        Gets the comments of a threat. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_threat_comments_with_http_info(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateThreatCommentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_threat_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `get_all_template_threat_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateThreatCommentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_threat_references(self, threat_id, **kwargs):  # noqa: E501
        """Gets the threat references through the threat id.  # noqa: E501

        Gets the threat references details. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_threat_references(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateThreatReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_threat_references_with_http_info(threat_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_threat_references_with_http_info(threat_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_threat_references_with_http_info(self, threat_id, **kwargs):  # noqa: E501
        """Gets the threat references through the threat id.  # noqa: E501

        Gets the threat references details. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_threat_references_with_http_info(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateThreatReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_threat_references" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `get_all_template_threat_references`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}/references', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateThreatReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_weakness_test_references(self, test_id, **kwargs):  # noqa: E501
        """Gets the list of references related to a weakness test.  # noqa: E501

        Gets the list of references related to a weakness test.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_weakness_test_references(test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_id: ID of the weakness test. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelGetTemplateWeaknessTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_weakness_test_references_with_http_info(test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_weakness_test_references_with_http_info(test_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_weakness_test_references_with_http_info(self, test_id, **kwargs):  # noqa: E501
        """Gets the list of references related to a weakness test.  # noqa: E501

        Gets the list of references related to a weakness test.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_weakness_test_references_with_http_info(test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_id: ID of the weakness test. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelGetTemplateWeaknessTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_weakness_test_references" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `get_all_template_weakness_test_references`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_id' in params:
            path_params['test-id'] = params['test_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/tests/{test-id}/references', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelGetTemplateWeaknessTestReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_weaknesses(self, **kwargs):  # noqa: E501
        """Get all weaknesses for visible templates.  # noqa: E501

        Get all weaknesses for visible templates. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_weaknesses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_weaknesses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_weaknesses_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_template_weaknesses_with_http_info(self, **kwargs):  # noqa: E501
        """Get all weaknesses for visible templates.  # noqa: E501

        Get all weaknesses for visible templates. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_weaknesses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_weaknesses" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateWeaknessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_templates_threats(self, **kwargs):  # noqa: E501
        """Get all the threats for visible templates  # noqa: E501

        Get all the threats for visible templates Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_templates_threats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateThreatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_templates_threats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_templates_threats_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_templates_threats_with_http_info(self, **kwargs):  # noqa: E501
        """Get all the threats for visible templates  # noqa: E501

        Get all the threats for visible templates Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_templates_threats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateThreatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_templates_threats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateThreatResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_weakness_by_template(self, template_id, **kwargs):  # noqa: E501
        """Get the weaknesses that belong to the given template.  # noqa: E501

        Get the weaknesses details.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_weakness_by_template(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_weakness_by_template_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_weakness_by_template_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_all_weakness_by_template_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Get the weaknesses that belong to the given template.  # noqa: E501

        Get the weaknesses details.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_weakness_by_template_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_weakness_by_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_all_weakness_by_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/weaknesses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateWeaknessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_weakness_by_template_threat(self, threat_id, **kwargs):  # noqa: E501
        """Get the weaknesses that belong to the given threat.  # noqa: E501

        Get the weaknesses details.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_weakness_by_template_threat(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_weakness_by_template_threat_with_http_info(threat_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_weakness_by_template_threat_with_http_info(threat_id, **kwargs)  # noqa: E501
            return data

    def get_all_weakness_by_template_threat_with_http_info(self, threat_id, **kwargs):  # noqa: E501
        """Get the weaknesses that belong to the given threat.  # noqa: E501

        Get the weaknesses details.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_weakness_by_template_threat_with_http_info(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_weakness_by_template_threat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `get_all_weakness_by_template_threat`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}/weaknesses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateWeaknessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_for_template_by_id(self, component_id, **kwargs):  # noqa: E501
        """Gets the template component.  # noqa: E501

        Gets the template component. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_for_template_by_id(component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: ID of the component. (required)
        :return: ComponentForTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_for_template_by_id_with_http_info(component_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_for_template_by_id_with_http_info(component_id, **kwargs)  # noqa: E501
            return data

    def get_component_for_template_by_id_with_http_info(self, component_id, **kwargs):  # noqa: E501
        """Gets the template component.  # noqa: E501

        Gets the template component. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_for_template_by_id_with_http_info(component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: ID of the component. (required)
        :return: ComponentForTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_for_template_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params or
                params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `get_component_for_template_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['component-id'] = params['component_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/components/{component-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComponentForTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_components_by_template(self, template_id, **kwargs):  # noqa: E501
        """Get all the components by template.  # noqa: E501

        Get all the components by template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_components_by_template(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelComponentForTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_components_by_template_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_components_by_template_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_components_by_template_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Get all the components by template.  # noqa: E501

        Get all the components by template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_components_by_template_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelComponentForTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_components_by_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_components_by_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelComponentForTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_risk_average(self, template_id, **kwargs):  # noqa: E501
        """Gets the risk average of a template.  # noqa: E501

        Gets the risk average of a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_risk_average(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: ProjectRiskAverageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_risk_average_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_risk_average_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_project_risk_average_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Gets the risk average of a template.  # noqa: E501

        Gets the risk average of a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_risk_average_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: ProjectRiskAverageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_risk_average" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_project_risk_average`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/analytics/risk/average', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectRiskAverageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_weakness_test_distribution(self, template_id, **kwargs):  # noqa: E501
        """Gets the weakness test distribution of a template.  # noqa: E501

        Gets the weakness test distribution of a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_weakness_test_distribution(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: CollectionModelGetWeaknessTestResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_weakness_test_distribution_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_weakness_test_distribution_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_project_weakness_test_distribution_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Gets the weakness test distribution of a template.  # noqa: E501

        Gets the weakness test distribution of a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_weakness_test_distribution_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: CollectionModelGetWeaknessTestResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_weakness_test_distribution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_project_weakness_test_distribution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/weaknesses/tests/analytics/results/distribution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionModelGetWeaknessTestResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_alerts(self, template_id, **kwargs):  # noqa: E501
        """Get all alerts for a template.  # noqa: E501

        Get the list of alerts for a threat model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_alerts(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateAlertResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_alerts_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_alerts_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_alerts_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Get all alerts for a template.  # noqa: E501

        Get the list of alerts for a threat model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_alerts_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateAlertResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_alerts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_alerts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/alerts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateAlertResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_architecture_questionnaire(self, template_id, **kwargs):  # noqa: E501
        """Retrieves the current status of the architecture questionnaire for the template.  # noqa: E501

        Retrieves the current status of the architecture questionnaire for the template. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.</li><li>The template must be synced.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_architecture_questionnaire(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: ArchitectureQuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_architecture_questionnaire_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_architecture_questionnaire_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_architecture_questionnaire_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Retrieves the current status of the architecture questionnaire for the template.  # noqa: E501

        Retrieves the current status of the architecture questionnaire for the template. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.</li><li>The template must be synced.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_architecture_questionnaire_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: ArchitectureQuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_architecture_questionnaire" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_architecture_questionnaire`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/questionnaire', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArchitectureQuestionnaireResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_artifact_by_id(self, artifact_id, **kwargs):  # noqa: E501
        """Return the details for an artifact id  # noqa: E501

        Return the details for an artifact id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_artifact_by_id(artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifact_id: ID of the artifact. (required)
        :return: ArtifactContentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_artifact_by_id_with_http_info(artifact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_artifact_by_id_with_http_info(artifact_id, **kwargs)  # noqa: E501
            return data

    def get_template_artifact_by_id_with_http_info(self, artifact_id, **kwargs):  # noqa: E501
        """Return the details for an artifact id  # noqa: E501

        Return the details for an artifact id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_artifact_by_id_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifact_id: ID of the artifact. (required)
        :return: ArtifactContentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifact_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_artifact_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params or
                params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `get_template_artifact_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifact_id' in params:
            path_params['artifact-id'] = params['artifact_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/artifacts/{artifact-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactContentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_by_id(self, template_id, **kwargs):  # noqa: E501
        """Retrieves the template that matches the id.  # noqa: E501

        For a template id returns the template data and attributes.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_by_id(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_by_id_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Retrieves the template that matches the id.  # noqa: E501

        For a template id returns the template data and attributes.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_by_id_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_component_questionnaire(self, component_id, **kwargs):  # noqa: E501
        """Retrieves the current status of the template component questionnaire.  # noqa: E501

        Retrieves the current status of the template component questionnaire. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted.</li><li>To have the permission **TEMPLATE_UPDATE_ALL** granted.</li><li>The template the component belongs to must not be undergoing synchronization.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_component_questionnaire(component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: ID of the component (required)
        :return: QuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_component_questionnaire_with_http_info(component_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_component_questionnaire_with_http_info(component_id, **kwargs)  # noqa: E501
            return data

    def get_template_component_questionnaire_with_http_info(self, component_id, **kwargs):  # noqa: E501
        """Retrieves the current status of the template component questionnaire.  # noqa: E501

        Retrieves the current status of the template component questionnaire. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted.</li><li>To have the permission **TEMPLATE_UPDATE_ALL** granted.</li><li>The template the component belongs to must not be undergoing synchronization.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_component_questionnaire_with_http_info(component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: ID of the component (required)
        :return: QuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_component_questionnaire" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params or
                params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `get_template_component_questionnaire`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['component-id'] = params['component_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/components/{component-id}/questionnaire', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuestionnaireResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_countermeasure_by_id(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets the details for a template countermeasure.  # noqa: E501

        Gets the details for a template countermeasure. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_by_id(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: Unique identifier of the countermeasure. (required)
        :return: TemplateCountermeasureDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_countermeasure_by_id_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_countermeasure_by_id_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
            return data

    def get_template_countermeasure_by_id_with_http_info(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets the details for a template countermeasure.  # noqa: E501

        Gets the details for a template countermeasure. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_by_id_with_http_info(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: Unique identifier of the countermeasure. (required)
        :return: TemplateCountermeasureDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['countermeasure_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_countermeasure_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `get_template_countermeasure_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/{countermeasure-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_countermeasure_history(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets the history records for a countermeasure.  # noqa: E501

        Gets the historical changes for a countermeasure, ordered by most recent by default. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_history(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: Unique identifier of the countermeasure. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_countermeasure_history_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_countermeasure_history_with_http_info(countermeasure_id, **kwargs)  # noqa: E501
            return data

    def get_template_countermeasure_history_with_http_info(self, countermeasure_id, **kwargs):  # noqa: E501
        """Gets the history records for a countermeasure.  # noqa: E501

        Gets the historical changes for a countermeasure, ordered by most recent by default. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_history_with_http_info(countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str countermeasure_id: Unique identifier of the countermeasure. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['countermeasure_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_countermeasure_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `get_template_countermeasure_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/{countermeasure-id}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_countermeasure_implementation_by_id(self, implementation_id, **kwargs):  # noqa: E501
        """Gets the countermeasure implementation details.  # noqa: E501

        Gets the countermeasure implementation details. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_implementation_by_id(implementation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str implementation_id: The id of the countermeasure implementation. (required)
        :return: TemplateCountermeasureImplementationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_countermeasure_implementation_by_id_with_http_info(implementation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_countermeasure_implementation_by_id_with_http_info(implementation_id, **kwargs)  # noqa: E501
            return data

    def get_template_countermeasure_implementation_by_id_with_http_info(self, implementation_id, **kwargs):  # noqa: E501
        """Gets the countermeasure implementation details.  # noqa: E501

        Gets the countermeasure implementation details. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_implementation_by_id_with_http_info(implementation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str implementation_id: The id of the countermeasure implementation. (required)
        :return: TemplateCountermeasureImplementationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['implementation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_countermeasure_implementation_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'implementation_id' is set
        if ('implementation_id' not in params or
                params['implementation_id'] is None):
            raise ValueError("Missing the required parameter `implementation_id` when calling `get_template_countermeasure_implementation_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'implementation_id' in params:
            path_params['implementation-id'] = params['implementation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/implementations/{implementation-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureImplementationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_countermeasure_reference_by_id(self, reference_id, **kwargs):  # noqa: E501
        """Gets a reference related to a countermeasure test.  # noqa: E501

        Gets a reference related to a countermeasure test.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_reference_by_id(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: The id of the countermeasure test reference. (required)
        :return: GetTemplateCountermeasureTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_countermeasure_reference_by_id_with_http_info(reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_countermeasure_reference_by_id_with_http_info(reference_id, **kwargs)  # noqa: E501
            return data

    def get_template_countermeasure_reference_by_id_with_http_info(self, reference_id, **kwargs):  # noqa: E501
        """Gets a reference related to a countermeasure test.  # noqa: E501

        Gets a reference related to a countermeasure test.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_reference_by_id_with_http_info(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: The id of the countermeasure test reference. (required)
        :return: GetTemplateCountermeasureTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_countermeasure_reference_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `get_template_countermeasure_reference_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/tests/references/{reference-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTemplateCountermeasureTestReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_countermeasure_reference_by_id1(self, reference_id, **kwargs):  # noqa: E501
        """Gets the countermeasure reference details.  # noqa: E501

        Gets the countermeasure reference details. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_reference_by_id1(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: The id of the countermeasure reference. (required)
        :return: TemplateCountermeasureReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_countermeasure_reference_by_id1_with_http_info(reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_countermeasure_reference_by_id1_with_http_info(reference_id, **kwargs)  # noqa: E501
            return data

    def get_template_countermeasure_reference_by_id1_with_http_info(self, reference_id, **kwargs):  # noqa: E501
        """Gets the countermeasure reference details.  # noqa: E501

        Gets the countermeasure reference details. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_reference_by_id1_with_http_info(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: The id of the countermeasure reference. (required)
        :return: TemplateCountermeasureReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_countermeasure_reference_by_id1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `get_template_countermeasure_reference_by_id1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/references/{reference-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_countermeasure_standard_reference(self, standard_reference_id, **kwargs):  # noqa: E501
        """Gets a specific countermeasure standard reference of the template.  # noqa: E501

        Gets a specific countermeasure standard reference of the template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_standard_reference(standard_reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str standard_reference_id: ID of the countermeasure standard reference (required)
        :return: TemplateCountermeasureStandardReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_countermeasure_standard_reference_with_http_info(standard_reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_countermeasure_standard_reference_with_http_info(standard_reference_id, **kwargs)  # noqa: E501
            return data

    def get_template_countermeasure_standard_reference_with_http_info(self, standard_reference_id, **kwargs):  # noqa: E501
        """Gets a specific countermeasure standard reference of the template.  # noqa: E501

        Gets a specific countermeasure standard reference of the template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_standard_reference_with_http_info(standard_reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str standard_reference_id: ID of the countermeasure standard reference (required)
        :return: TemplateCountermeasureStandardReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['standard_reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_countermeasure_standard_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'standard_reference_id' is set
        if ('standard_reference_id' not in params or
                params['standard_reference_id'] is None):
            raise ValueError("Missing the required parameter `standard_reference_id` when calling `get_template_countermeasure_standard_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'standard_reference_id' in params:
            path_params['standard-reference-id'] = params['standard_reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/standard-references/{standard-reference-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureStandardReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_countermeasure_state_distribution(self, template_id, **kwargs):  # noqa: E501
        """Gets the number of countermeasures in each state for a template.  # noqa: E501

        Gets the number of countermeasures in each state for a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_state_distribution(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: CollectionModelCountermeasureStateDistributionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_countermeasure_state_distribution_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_countermeasure_state_distribution_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_countermeasure_state_distribution_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Gets the number of countermeasures in each state for a template.  # noqa: E501

        Gets the number of countermeasures in each state for a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_state_distribution_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: CollectionModelCountermeasureStateDistributionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_countermeasure_state_distribution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_countermeasure_state_distribution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/countermeasures/analytics/states/distribution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionModelCountermeasureStateDistributionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_countermeasure_test(self, test_id, **kwargs):  # noqa: E501
        """Gets the test related to a countermeasure.  # noqa: E501

        Gets the test related to a countermeasure.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_test(test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_id: The id of the countermeasure test. (required)
        :return: TemplateCountermeasureTestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_countermeasure_test_with_http_info(test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_countermeasure_test_with_http_info(test_id, **kwargs)  # noqa: E501
            return data

    def get_template_countermeasure_test_with_http_info(self, test_id, **kwargs):  # noqa: E501
        """Gets the test related to a countermeasure.  # noqa: E501

        Gets the test related to a countermeasure.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_test_with_http_info(test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_id: The id of the countermeasure test. (required)
        :return: TemplateCountermeasureTestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_countermeasure_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `get_template_countermeasure_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_id' in params:
            path_params['test-id'] = params['test_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/tests/{test-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureTestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_countermeasure_test_history(self, test_id, **kwargs):  # noqa: E501
        """Gets the history records for a countermeasure test.  # noqa: E501

        Gets the historical changes for a countermeasure test, ordered by most recent by default. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_test_history(test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_id: ID of the test (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_countermeasure_test_history_with_http_info(test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_countermeasure_test_history_with_http_info(test_id, **kwargs)  # noqa: E501
            return data

    def get_template_countermeasure_test_history_with_http_info(self, test_id, **kwargs):  # noqa: E501
        """Gets the history records for a countermeasure test.  # noqa: E501

        Gets the historical changes for a countermeasure test, ordered by most recent by default. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_countermeasure_test_history_with_http_info(test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_id: ID of the test (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_countermeasure_test_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `get_template_countermeasure_test_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_id' in params:
            path_params['test-id'] = params['test_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/tests/{test-id}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_current_artifact(self, template_id, **kwargs):  # noqa: E501
        """Get the details of the current artifact of a template by template id.  # noqa: E501

        Return the details of the current artifact of a template, including its content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_current_artifact(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: ArtifactContentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_current_artifact_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_current_artifact_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_current_artifact_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Get the details of the current artifact of a template by template id.  # noqa: E501

        Return the details of the current artifact of a template, including its content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_current_artifact_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: ArtifactContentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_current_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_current_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/artifacts/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactContentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_diagram_by_id(self, template_id, **kwargs):  # noqa: E501
        """Get the diagram of a template.  # noqa: E501

        Get the diagram and related info of a template by template id. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_diagram_by_id(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: DiagramResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_diagram_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_diagram_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_diagram_by_id_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Get the diagram of a template.  # noqa: E501

        Get the diagram and related info of a template by template id. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_diagram_by_id_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: DiagramResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_diagram_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_diagram_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/diagram', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiagramResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_diagram_content_by_id(self, template_id, **kwargs):  # noqa: E501
        """Get the raw diagram of a template.  # noqa: E501

        Get the raw diagram template by template id. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_diagram_content_by_id(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_diagram_content_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_diagram_content_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_diagram_content_by_id_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Get the raw diagram of a template.  # noqa: E501

        Get the raw diagram template by template id. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_diagram_content_by_id_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_diagram_content_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_diagram_content_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/diagram/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_diagram_metadata(self, template_id, **kwargs):  # noqa: E501
        """Provides a template's diagram metadata.  # noqa: E501

        Provides a template's diagram metadata. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted or - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_diagram_metadata(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: DiagramMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_diagram_metadata_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_diagram_metadata_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_diagram_metadata_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Provides a template's diagram metadata.  # noqa: E501

        Provides a template's diagram metadata. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted or - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_diagram_metadata_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: DiagramMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_diagram_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_diagram_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/diagram/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiagramMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_risk_distribution(self, template_id, **kwargs):  # noqa: E501
        """Obtains the template risk distribution.  # noqa: E501

        Obtains the number of threats categorized by risk level for a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_risk_distribution(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: CollectionModelRiskDistributionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_risk_distribution_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_risk_distribution_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_risk_distribution_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Obtains the template risk distribution.  # noqa: E501

        Obtains the number of threats categorized by risk level for a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_risk_distribution_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: CollectionModelRiskDistributionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_risk_distribution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_risk_distribution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/analytics/risk/distribution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionModelRiskDistributionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_settings_by_id(self, template_id, **kwargs):  # noqa: E501
        """Get settings for a template.  # noqa: E501

        Get settings for a template.  Conditions to be able to perform the action:  - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_settings_by_id(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: TemplateSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_settings_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_settings_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_settings_by_id_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Get settings for a template.  # noqa: E501

        Get settings for a template.  Conditions to be able to perform the action:  - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_settings_by_id_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: TemplateSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_settings_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_settings_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateSettingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_summary(self, **kwargs):  # noqa: E501
        """Retrieves a list of templates.  # noqa: E501

        Retrieves a summary of all templates for all users.  The filters available are: - id - referenceId - name - labels (strict comparison, just as strings)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_template_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_template_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves a list of templates.  # noqa: E501

        Retrieves a summary of all templates for all users.  The filters available are: - id - referenceId - name - labels (strict comparison, just as strings)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateSummaryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_threat_by_id(self, threat_id, **kwargs):  # noqa: E501
        """Get the threat details.  # noqa: E501

        Get the threat details. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_threat_by_id(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :return: TemplateThreatWithCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_threat_by_id_with_http_info(threat_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_threat_by_id_with_http_info(threat_id, **kwargs)  # noqa: E501
            return data

    def get_template_threat_by_id_with_http_info(self, threat_id, **kwargs):  # noqa: E501
        """Get the threat details.  # noqa: E501

        Get the threat details. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_threat_by_id_with_http_info(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :return: TemplateThreatWithCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_threat_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `get_template_threat_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateThreatWithCustomFieldsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_threat_history(self, threat_id, **kwargs):  # noqa: E501
        """Gets the history records for a threat.  # noqa: E501

        Gets the historical changes for a threat, ordered by most recent by default. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_threat_history(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_threat_history_with_http_info(threat_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_threat_history_with_http_info(threat_id, **kwargs)  # noqa: E501
            return data

    def get_template_threat_history_with_http_info(self, threat_id, **kwargs):  # noqa: E501
        """Gets the history records for a threat.  # noqa: E501

        Gets the historical changes for a threat, ordered by most recent by default. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_threat_history_with_http_info(threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_id: Unique identifier of the threat. (required)
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_threat_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `get_template_threat_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_threat_reference(self, reference_id, **kwargs):  # noqa: E501
        """Gets the threat reference through the id.  # noqa: E501

        Gets the threat reference details. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_threat_reference(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: ID of a reference. (required)
        :return: TemplateThreatReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_threat_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_threat_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
            return data

    def get_template_threat_reference_with_http_info(self, reference_id, **kwargs):  # noqa: E501
        """Gets the threat reference through the id.  # noqa: E501

        Gets the threat reference details. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_threat_reference_with_http_info(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: ID of a reference. (required)
        :return: TemplateThreatReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_threat_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `get_template_threat_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/references/{reference-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateThreatReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_use_case_by_id(self, use_case_id, **kwargs):  # noqa: E501
        """Get the use case by ID.  # noqa: E501

        Get the use case by ID. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_use_case_by_id(use_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str use_case_id: ID of the use case. (required)
        :return: TemplateUseCaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_use_case_by_id_with_http_info(use_case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_use_case_by_id_with_http_info(use_case_id, **kwargs)  # noqa: E501
            return data

    def get_template_use_case_by_id_with_http_info(self, use_case_id, **kwargs):  # noqa: E501
        """Get the use case by ID.  # noqa: E501

        Get the use case by ID. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_use_case_by_id_with_http_info(use_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str use_case_id: ID of the use case. (required)
        :return: TemplateUseCaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['use_case_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_use_case_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'use_case_id' is set
        if ('use_case_id' not in params or
                params['use_case_id'] is None):
            raise ValueError("Missing the required parameter `use_case_id` when calling `get_template_use_case_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'use_case_id' in params:
            path_params['use-case-id'] = params['use_case_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/use-cases/{use-case-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateUseCaseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_weakness_test(self, test_id, **kwargs):  # noqa: E501
        """Gets the test related to a weakness.  # noqa: E501

        Gets the test related to a weakness. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_weakness_test(test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_id: ID of the weakness test. (required)
        :return: TemplateWeaknessTestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_weakness_test_with_http_info(test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_weakness_test_with_http_info(test_id, **kwargs)  # noqa: E501
            return data

    def get_template_weakness_test_with_http_info(self, test_id, **kwargs):  # noqa: E501
        """Gets the test related to a weakness.  # noqa: E501

        Gets the test related to a weakness. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_weakness_test_with_http_info(test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_id: ID of the weakness test. (required)
        :return: TemplateWeaknessTestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_weakness_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `get_template_weakness_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_id' in params:
            path_params['test-id'] = params['test_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/tests/{test-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateWeaknessTestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_weakness_test_reference(self, reference_id, **kwargs):  # noqa: E501
        """Gets the reference related to a weakness test.  # noqa: E501

        Gets the reference related to a weakness test.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_weakness_test_reference(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: ID of the weakness test reference. (required)
        :return: GetTemplateWeaknessTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_weakness_test_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_weakness_test_reference_with_http_info(reference_id, **kwargs)  # noqa: E501
            return data

    def get_template_weakness_test_reference_with_http_info(self, reference_id, **kwargs):  # noqa: E501
        """Gets the reference related to a weakness test.  # noqa: E501

        Gets the reference related to a weakness test.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_weakness_test_reference_with_http_info(reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_id: ID of the weakness test reference. (required)
        :return: GetTemplateWeaknessTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_weakness_test_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `get_template_weakness_test_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/tests/references/{reference-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTemplateWeaknessTestReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_templates(self, **kwargs):  # noqa: E501
        """Get the list of templates.  # noqa: E501

        Get the list of templates for the current user. If the user has the permission TEMPLATE_UPDATE_ALL they can see all the templates. If the user has the permission TEMPLATE_UPDATE they will only be able to see those templates for which they have  visibility. If the user does not have any of the above permissions, no templates will be displayed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :return: PagedModelTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_templates_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of templates.  # noqa: E501

        Get the list of templates for the current user. If the user has the permission TEMPLATE_UPDATE_ALL they can see all the templates. If the user has the permission TEMPLATE_UPDATE they will only be able to see those templates for which they have  visibility. If the user does not have any of the above permissions, no templates will be displayed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :return: PagedModelTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_templates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_threats_by_template(self, template_id, **kwargs):  # noqa: E501
        """Get all the threats of the template.  # noqa: E501

        Get all the threats of the template Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_threats_by_template(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateThreatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_threats_by_template_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_threats_by_template_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_threats_by_template_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Get all the threats of the template.  # noqa: E501

        Get all the threats of the template Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_threats_by_template_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateThreatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_threats_by_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_threats_by_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/threats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateThreatResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_threats_by_template_use_case(self, use_case_id, **kwargs):  # noqa: E501
        """Get all the threats by use case.  # noqa: E501

        Get all the threats by use case. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_threats_by_template_use_case(use_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str use_case_id: ID of the use case. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateThreatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_threats_by_template_use_case_with_http_info(use_case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_threats_by_template_use_case_with_http_info(use_case_id, **kwargs)  # noqa: E501
            return data

    def get_threats_by_template_use_case_with_http_info(self, use_case_id, **kwargs):  # noqa: E501
        """Get all the threats by use case.  # noqa: E501

        Get all the threats by use case. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_threats_by_template_use_case_with_http_info(use_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str use_case_id: ID of the use case. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateThreatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['use_case_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_threats_by_template_use_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'use_case_id' is set
        if ('use_case_id' not in params or
                params['use_case_id'] is None):
            raise ValueError("Missing the required parameter `use_case_id` when calling `get_threats_by_template_use_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'use_case_id' in params:
            path_params['use-case-id'] = params['use_case_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/use-cases/{use-case-id}/threats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateThreatResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_use_cases_by_template(self, template_id, **kwargs):  # noqa: E501
        """Get all the use cases by template.  # noqa: E501

        Get all the use cases by template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_use_cases_by_template(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateUseCaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_use_cases_by_template_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_use_cases_by_template_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_use_cases_by_template_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Get all the use cases by template.  # noqa: E501

        Get all the use cases by template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_use_cases_by_template_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateUseCaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_use_cases_by_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_use_cases_by_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/use-cases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateUseCaseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_use_cases_by_template_component(self, component_id, **kwargs):  # noqa: E501
        """Get all the template use cases by component.  # noqa: E501

        Get all the template use cases by component. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_use_cases_by_template_component(component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: ID of the component. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateUseCaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_use_cases_by_template_component_with_http_info(component_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_use_cases_by_template_component_with_http_info(component_id, **kwargs)  # noqa: E501
            return data

    def get_use_cases_by_template_component_with_http_info(self, component_id, **kwargs):  # noqa: E501
        """Get all the template use cases by component.  # noqa: E501

        Get all the template use cases by component. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_use_cases_by_template_component_with_http_info(component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: ID of the component. (required)
        :param str filter: Filter to apply to the returned items. It is possible to filter by any property of the response.  The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** parameters will lead to unexpected results. Both the properties and values must be enclosed in single quotation marks. | Operator | Description | Example | | -------- | ----------- |-------- | | =        | Returns items where the property **equals** to the value           | /resources?filter=**'field'='value'** | | =NULL    | Returns items where the property **is null**, it has no value     | /resources?filter=**'field'=NULL** | | <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** | | <>NULL   | Returns items where the property **is not null**, it has any value     | /resources?filter=**'field'<>NULL** | | >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** | | <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** | | >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** | | <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** | | ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'value'** | | IN       | Returns items where the list property **contains** any of the values | /resources?filter=**'field'IN'value1,value2,...'** | | :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** | | :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** | ---  <sup>1</sup> Bigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings. The following data types support filtering: - Boolean - String - Enumerations - Numeric - Dates - Timestamps  **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example: ``` /resources?filter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4') ```
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
        :return: PagedModelTemplateUseCaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id', 'filter', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_use_cases_by_template_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params or
                params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `get_use_cases_by_template_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['component-id'] = params['component_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/components/{component-id}/use-cases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateUseCaseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_weakness_by_id(self, weakness_id, **kwargs):  # noqa: E501
        """Get the weakness that matches the id.  # noqa: E501

        Get the weakness details.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_weakness_by_id(weakness_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weakness_id: ID of the weakness (required)
        :return: TemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_weakness_by_id_with_http_info(weakness_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_weakness_by_id_with_http_info(weakness_id, **kwargs)  # noqa: E501
            return data

    def get_weakness_by_id_with_http_info(self, weakness_id, **kwargs):  # noqa: E501
        """Get the weakness that matches the id.  # noqa: E501

        Get the weakness details.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_weakness_by_id_with_http_info(weakness_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weakness_id: ID of the weakness (required)
        :return: TemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['weakness_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_weakness_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'weakness_id' is set
        if ('weakness_id' not in params or
                params['weakness_id'] is None):
            raise ValueError("Missing the required parameter `weakness_id` when calling `get_weakness_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'weakness_id' in params:
            path_params['weakness-id'] = params['weakness_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/{weakness-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateWeaknessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_template(self, file, reference_id, name, **kwargs):  # noqa: E501
        """Create a new template based on the uploaded XML file.  # noqa: E501

        Create a new template based on the uploaded XML file.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_template(file, reference_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str reference_id: (required)
        :param str name: (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_template_with_http_info(file, reference_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.import_template_with_http_info(file, reference_id, name, **kwargs)  # noqa: E501
            return data

    def import_template_with_http_info(self, file, reference_id, name, **kwargs):  # noqa: E501
        """Create a new template based on the uploaded XML file.  # noqa: E501

        Create a new template based on the uploaded XML file.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_template_with_http_info(file, reference_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str reference_id: (required)
        :param str name: (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'reference_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `import_template`")  # noqa: E501
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `import_template`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `import_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'reference_id' in params:
            form_params.append(('referenceId', params['reference_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_template_into_template(self, body, x_irius_async, template_id, **kwargs):  # noqa: E501
        """Import the selected templates into a template.  # noqa: E501

        Import the selected templates into a template. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.</li><li>The template must be synced.</li><li>The templates to import must exists.</li></ul>  Also templates in read only mode cannot be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_template_into_template(body, x_irius_async, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: List of template ids to import. (required)
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :param str template_id: ID of the template (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_template_into_template_with_http_info(body, x_irius_async, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.import_template_into_template_with_http_info(body, x_irius_async, template_id, **kwargs)  # noqa: E501
            return data

    def import_template_into_template_with_http_info(self, body, x_irius_async, template_id, **kwargs):  # noqa: E501
        """Import the selected templates into a template.  # noqa: E501

        Import the selected templates into a template. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.</li><li>The template must be synced.</li><li>The templates to import must exists.</li></ul>  Also templates in read only mode cannot be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_template_into_template_with_http_info(body, x_irius_async, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: List of template ids to import. (required)
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :param str template_id: ID of the template (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_irius_async', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_template_into_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `import_template_into_template`")  # noqa: E501
        # verify the required parameter 'x_irius_async' is set
        if ('x_irius_async' not in params or
                params['x_irius_async'] is None):
            raise ValueError("Missing the required parameter `x_irius_async` when calling `import_template_into_template`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `import_template_into_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_irius_async' in params:
            header_params['X-Irius-Async'] = params['x_irius_async']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/import-template', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_template_components_by_threat_filters(self, body, template_id, **kwargs):  # noqa: E501
        """Get all the components by template and threat filters.  # noqa: E501

        Get all the components by template and threat filters. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_template_components_by_threat_filters(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateComponentQueryRequest body: (required)
        :param str template_id: ID of the template (required)
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Available fields to sort by: id, referenceId, name, description, parent and diagram component id. Multiple sort criteria are supported.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :return: PagedModelComponentForTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_template_components_by_threat_filters_with_http_info(body, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_template_components_by_threat_filters_with_http_info(body, template_id, **kwargs)  # noqa: E501
            return data

    def query_template_components_by_threat_filters_with_http_info(self, body, template_id, **kwargs):  # noqa: E501
        """Get all the components by template and threat filters.  # noqa: E501

        Get all the components by template and threat filters. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_template_components_by_threat_filters_with_http_info(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateComponentQueryRequest body: (required)
        :param str template_id: ID of the template (required)
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Available fields to sort by: id, referenceId, name, description, parent and diagram component id. Multiple sort criteria are supported.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :return: PagedModelComponentForTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_id', 'sort', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_template_components_by_threat_filters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `query_template_components_by_threat_filters`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `query_template_components_by_threat_filters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/components/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelComponentForTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_template_countermeasures(self, body, template_id, **kwargs):  # noqa: E501
        """Gets the countermeasures for a template, based on filters  # noqa: E501

        Gets the countermeasures for a template, based on filters. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_template_countermeasures(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateCountermeasureQueryRequest body: (required)
        :param str template_id: ID of the template (required)
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Available fields to sort by: name, source, state, cost, issueId. Multiple sort criteria are supported.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :return: PagedModelTemplateCountermeasureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_template_countermeasures_with_http_info(body, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_template_countermeasures_with_http_info(body, template_id, **kwargs)  # noqa: E501
            return data

    def query_template_countermeasures_with_http_info(self, body, template_id, **kwargs):  # noqa: E501
        """Gets the countermeasures for a template, based on filters  # noqa: E501

        Gets the countermeasures for a template, based on filters. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_template_countermeasures_with_http_info(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateCountermeasureQueryRequest body: (required)
        :param str template_id: ID of the template (required)
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Available fields to sort by: name, source, state, cost, issueId. Multiple sort criteria are supported.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :return: PagedModelTemplateCountermeasureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_id', 'sort', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_template_countermeasures" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `query_template_countermeasures`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `query_template_countermeasures`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/countermeasures/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateCountermeasureResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_template_threats_by_template(self, body, template_id, **kwargs):  # noqa: E501
        """Search the threats for a template, based on filters.  # noqa: E501

        Search the threats for a template, based on filters. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_template_threats_by_template(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateThreatQueryRequest body: (required)
        :param str template_id: ID of the template (required)
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Available fields to sort by: name, source, risk, inherentRisk, projectedRisk. Multiple sort criteria are supported.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :return: PagedModelTemplateThreatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_template_threats_by_template_with_http_info(body, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_template_threats_by_template_with_http_info(body, template_id, **kwargs)  # noqa: E501
            return data

    def query_template_threats_by_template_with_http_info(self, body, template_id, **kwargs):  # noqa: E501
        """Search the threats for a template, based on filters.  # noqa: E501

        Search the threats for a template, based on filters. Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_template_threats_by_template_with_http_info(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateThreatQueryRequest body: (required)
        :param str template_id: ID of the template (required)
        :param list[str] sort: Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Available fields to sort by: name, source, risk, inherentRisk, projectedRisk. Multiple sort criteria are supported.
        :param int page: Zero-based page index (0..N)
        :param int size: The size of the page to be returned
        :return: PagedModelTemplateThreatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_id', 'sort', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_template_threats_by_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `query_template_threats_by_template`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `query_template_threats_by_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/threats/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateThreatResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_template_weaknesses(self, body, template_id, **kwargs):  # noqa: E501
        """Searches the weaknesses for a template, based on filters  # noqa: E501

        Searches the weaknesses for a template, based on filters.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_template_weaknesses(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateWeaknessQueryRequest body: (required)
        :param str template_id: ID of the template (required)
        :param int size: The size of the page to be returned
        :return: PagedModelTemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_template_weaknesses_with_http_info(body, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_template_weaknesses_with_http_info(body, template_id, **kwargs)  # noqa: E501
            return data

    def query_template_weaknesses_with_http_info(self, body, template_id, **kwargs):  # noqa: E501
        """Searches the weaknesses for a template, based on filters  # noqa: E501

        Searches the weaknesses for a template, based on filters.  Conditions to be able to perform the action: - To have the permission **TEMPLATE_LIBRARY_VIEW** granted, or, - To have the permission **TEMPLATE_UPDATE_ALL** granted, or, - To have the permission **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_template_weaknesses_with_http_info(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateWeaknessQueryRequest body: (required)
        :param str template_id: ID of the template (required)
        :param int size: The size of the page to be returned
        :return: PagedModelTemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_id', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_template_weaknesses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `query_template_weaknesses`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `query_template_weaknesses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/weaknesses/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedModelTemplateWeaknessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_template_diagram_by_id(self, template_id, **kwargs):  # noqa: E501
        """Restore an edited diagram where the threat model has not been updated  # noqa: E501

        If a diagram was edited but the threat model is not updated yet, the previous  state of the diagram can be restored.  Conditions to be able to perform the action: - To have the permission **ARCHITECTURE_UPDATE** granted and - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_template_diagram_by_id(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_template_diagram_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_template_diagram_by_id_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def reset_template_diagram_by_id_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Restore an edited diagram where the threat model has not been updated  # noqa: E501

        If a diagram was edited but the threat model is not updated yet, the previous  state of the diagram can be restored.  Conditions to be able to perform the action: - To have the permission **ARCHITECTURE_UPDATE** granted and - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_template_diagram_by_id_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: ID of the template (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_template_diagram_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `reset_template_diagram_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/diagram/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulate_template_architecture_questionnaire(self, body, template_id, **kwargs):  # noqa: E501
        """Executes a simulation of the outcome of running the architecture questionnaire.  # noqa: E501

        Executes a simulation of the outcome of running the architecture questionnaire. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted.</li><li>To have the permission **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulate_template_architecture_questionnaire(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateWizardQuestionnaireRequest body: (required)
        :param str template_id: ID of the template (required)
        :return: ArchitectureQuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simulate_template_architecture_questionnaire_with_http_info(body, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.simulate_template_architecture_questionnaire_with_http_info(body, template_id, **kwargs)  # noqa: E501
            return data

    def simulate_template_architecture_questionnaire_with_http_info(self, body, template_id, **kwargs):  # noqa: E501
        """Executes a simulation of the outcome of running the architecture questionnaire.  # noqa: E501

        Executes a simulation of the outcome of running the architecture questionnaire. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted.</li><li>To have the permission **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulate_template_architecture_questionnaire_with_http_info(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateWizardQuestionnaireRequest body: (required)
        :param str template_id: ID of the template (required)
        :return: ArchitectureQuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulate_template_architecture_questionnaire" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `simulate_template_architecture_questionnaire`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `simulate_template_architecture_questionnaire`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/questionnaire/simulate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArchitectureQuestionnaireResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulate_template_component_questionnaire(self, body, component_id, **kwargs):  # noqa: E501
        """Executes a simulation of the outcome of running this template component questionnaire.  # noqa: E501

        Executes a simulation of the outcome of running this template component questionnaire. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted.</li><li>To have the permission **TEMPLATE_UPDATE_ALL** granted.</li><li>The template the component belongs to must not be undergoing synchronization.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulate_template_component_questionnaire(body, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateWizardQuestionnaireRequest body: (required)
        :param str component_id: ID of the component (required)
        :return: ComponentQuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simulate_template_component_questionnaire_with_http_info(body, component_id, **kwargs)  # noqa: E501
        else:
            (data) = self.simulate_template_component_questionnaire_with_http_info(body, component_id, **kwargs)  # noqa: E501
            return data

    def simulate_template_component_questionnaire_with_http_info(self, body, component_id, **kwargs):  # noqa: E501
        """Executes a simulation of the outcome of running this template component questionnaire.  # noqa: E501

        Executes a simulation of the outcome of running this template component questionnaire. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted.</li><li>To have the permission **TEMPLATE_UPDATE_ALL** granted.</li><li>The template the component belongs to must not be undergoing synchronization.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulate_template_component_questionnaire_with_http_info(body, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateWizardQuestionnaireRequest body: (required)
        :param str component_id: ID of the component (required)
        :return: ComponentQuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'component_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulate_template_component_questionnaire" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `simulate_template_component_questionnaire`")  # noqa: E501
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params or
                params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `simulate_template_component_questionnaire`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['component-id'] = params['component_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/components/{component-id}/questionnaire/simulate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComponentQuestionnaireResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_template(self, x_irius_async, template_id, **kwargs):  # noqa: E501
        """Creates a new async operation to synchronize the template.  # noqa: E501

        Creates a new async operation to synchronize the template. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_template(x_irius_async, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :param str template_id: ID of the template (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sync_template_with_http_info(x_irius_async, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_template_with_http_info(x_irius_async, template_id, **kwargs)  # noqa: E501
            return data

    def sync_template_with_http_info(self, x_irius_async, template_id, **kwargs):  # noqa: E501
        """Creates a new async operation to synchronize the template.  # noqa: E501

        Creates a new async operation to synchronize the template. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_template_with_http_info(x_irius_async, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool x_irius_async: Sets whether the endpoint works asynchronously or not passed as parameter. (required)
        :param str template_id: ID of the template (required)
        :return: AsyncOperationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_irius_async', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_irius_async' is set
        if ('x_irius_async' not in params or
                params['x_irius_async'] is None):
            raise ValueError("Missing the required parameter `x_irius_async` when calling `sync_template`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `sync_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_irius_async' in params:
            header_params['X-Irius-Async'] = params['x_irius_async']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_project_use_case(self, body, use_case_id, **kwargs):  # noqa: E501
        """Update a use case.  # noqa: E501

        Update a use case. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_project_use_case(body, use_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateUseCaseRequest body: (required)
        :param str use_case_id: ID of the use case. (required)
        :return: TemplateUseCaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_project_use_case_with_http_info(body, use_case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_project_use_case_with_http_info(body, use_case_id, **kwargs)  # noqa: E501
            return data

    def update_project_use_case_with_http_info(self, body, use_case_id, **kwargs):  # noqa: E501
        """Update a use case.  # noqa: E501

        Update a use case. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_project_use_case_with_http_info(body, use_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateUseCaseRequest body: (required)
        :param str use_case_id: ID of the use case. (required)
        :return: TemplateUseCaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'use_case_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_project_use_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_project_use_case`")  # noqa: E501
        # verify the required parameter 'use_case_id' is set
        if ('use_case_id' not in params or
                params['use_case_id'] is None):
            raise ValueError("Missing the required parameter `use_case_id` when calling `update_project_use_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'use_case_id' in params:
            path_params['use-case-id'] = params['use_case_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/use-cases/{use-case-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateUseCaseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template(self, body, template_id, **kwargs):  # noqa: E501
        """Update the template that matches the id.  # noqa: E501

        Modify the template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted to update own templates. - To have the permission **TEMPLATE_UPDATE_ALL** granted to update any templates. To update the reference id of the template you will also need: - To have the permission **PRODUCT_ID_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateRequest body: The template to be updated. (required)
        :param str template_id: ID of the template (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_with_http_info(body, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_with_http_info(body, template_id, **kwargs)  # noqa: E501
            return data

    def update_template_with_http_info(self, body, template_id, **kwargs):  # noqa: E501
        """Update the template that matches the id.  # noqa: E501

        Modify the template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted to update own templates. - To have the permission **TEMPLATE_UPDATE_ALL** granted to update any templates. To update the reference id of the template you will also need: - To have the permission **PRODUCT_ID_UPDATE** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_with_http_info(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateRequest body: The template to be updated. (required)
        :param str template_id: ID of the template (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `update_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_architecture_questionnaire(self, body, template_id, **kwargs):  # noqa: E501
        """Executes an update of the architecture questionnaire for the template.  # noqa: E501

        Executes an update of the architecture questionnaire for the template. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.</li><li>The project must be synchronized.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_architecture_questionnaire(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateWizardQuestionnaireRequest body: (required)
        :param str template_id: ID of the template (required)
        :return: ArchitectureQuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_architecture_questionnaire_with_http_info(body, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_architecture_questionnaire_with_http_info(body, template_id, **kwargs)  # noqa: E501
            return data

    def update_template_architecture_questionnaire_with_http_info(self, body, template_id, **kwargs):  # noqa: E501
        """Executes an update of the architecture questionnaire for the template.  # noqa: E501

        Executes an update of the architecture questionnaire for the template. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.</li><li>The project must be synchronized.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_architecture_questionnaire_with_http_info(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateWizardQuestionnaireRequest body: (required)
        :param str template_id: ID of the template (required)
        :return: ArchitectureQuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_architecture_questionnaire" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_architecture_questionnaire`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `update_template_architecture_questionnaire`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/questionnaire', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArchitectureQuestionnaireResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_component_questionnaire(self, body, component_id, **kwargs):  # noqa: E501
        """Executes an update of the template component questionnaire.  # noqa: E501

        Executes an update of the template component questionnaire. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted.</li><li>To have the permission **TEMPLATE_UPDATE_ALL** granted.</li><li>The template the component belongs to must not be undergoing synchronization.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_component_questionnaire(body, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateWizardQuestionnaireRequest body: (required)
        :param str component_id: ID of the component (required)
        :return: ComponentQuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_component_questionnaire_with_http_info(body, component_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_component_questionnaire_with_http_info(body, component_id, **kwargs)  # noqa: E501
            return data

    def update_template_component_questionnaire_with_http_info(self, body, component_id, **kwargs):  # noqa: E501
        """Executes an update of the template component questionnaire.  # noqa: E501

        Executes an update of the template component questionnaire. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted.</li><li>To have the permission **TEMPLATE_UPDATE_ALL** granted.</li><li>The template the component belongs to must not be undergoing synchronization.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_component_questionnaire_with_http_info(body, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateWizardQuestionnaireRequest body: (required)
        :param str component_id: ID of the component (required)
        :return: ComponentQuestionnaireResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'component_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_component_questionnaire" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_component_questionnaire`")  # noqa: E501
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params or
                params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `update_template_component_questionnaire`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['component-id'] = params['component_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/components/{component-id}/questionnaire', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComponentQuestionnaireResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_countermeasure(self, body, countermeasure_id, **kwargs):  # noqa: E501
        """Update a Template Countermeasure.  # noqa: E501

        Updates the details of an existing template countermeasure using its ID. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure(body, countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureRequest body: (required)
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: TemplateCountermeasureDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_countermeasure_with_http_info(body, countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_countermeasure_with_http_info(body, countermeasure_id, **kwargs)  # noqa: E501
            return data

    def update_template_countermeasure_with_http_info(self, body, countermeasure_id, **kwargs):  # noqa: E501
        """Update a Template Countermeasure.  # noqa: E501

        Updates the details of an existing template countermeasure using its ID. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_with_http_info(body, countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureRequest body: (required)
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: TemplateCountermeasureDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'countermeasure_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_countermeasure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_countermeasure`")  # noqa: E501
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `update_template_countermeasure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/{countermeasure-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_countermeasure_implementation(self, body, implementation_id, **kwargs):  # noqa: E501
        """Updates a countermeasure implementation.  # noqa: E501

        Updates a countermeasure implementation. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_implementation(body, implementation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureImplementationRequest body: (required)
        :param str implementation_id: The id of the countermeasure implementation. (required)
        :return: TemplateCountermeasureImplementationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_countermeasure_implementation_with_http_info(body, implementation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_countermeasure_implementation_with_http_info(body, implementation_id, **kwargs)  # noqa: E501
            return data

    def update_template_countermeasure_implementation_with_http_info(self, body, implementation_id, **kwargs):  # noqa: E501
        """Updates a countermeasure implementation.  # noqa: E501

        Updates a countermeasure implementation. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_implementation_with_http_info(body, implementation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureImplementationRequest body: (required)
        :param str implementation_id: The id of the countermeasure implementation. (required)
        :return: TemplateCountermeasureImplementationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'implementation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_countermeasure_implementation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_countermeasure_implementation`")  # noqa: E501
        # verify the required parameter 'implementation_id' is set
        if ('implementation_id' not in params or
                params['implementation_id'] is None):
            raise ValueError("Missing the required parameter `implementation_id` when calling `update_template_countermeasure_implementation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'implementation_id' in params:
            path_params['implementation-id'] = params['implementation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/implementations/{implementation-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureImplementationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_countermeasure_reference(self, body, reference_id, **kwargs):  # noqa: E501
        """Updates a reference for a countermeasure.  # noqa: E501

        Updates a reference for a countermeasure. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_reference(body, reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureReferenceRequest body: (required)
        :param str reference_id: The id of the countermeasure reference. (required)
        :return: TemplateCountermeasureReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_countermeasure_reference_with_http_info(body, reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_countermeasure_reference_with_http_info(body, reference_id, **kwargs)  # noqa: E501
            return data

    def update_template_countermeasure_reference_with_http_info(self, body, reference_id, **kwargs):  # noqa: E501
        """Updates a reference for a countermeasure.  # noqa: E501

        Updates a reference for a countermeasure. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_reference_with_http_info(body, reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureReferenceRequest body: (required)
        :param str reference_id: The id of the countermeasure reference. (required)
        :return: TemplateCountermeasureReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_countermeasure_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_countermeasure_reference`")  # noqa: E501
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `update_template_countermeasure_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/references/{reference-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_countermeasure_standard_reference(self, body, standard_reference_id, **kwargs):  # noqa: E501
        """Updates a template countermeasure standard reference.  # noqa: E501

        Updates a template countermeasure standard reference. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted, or</li> - To have the permission **TEMPLATE_UPDATE** granted.</li>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_standard_reference(body, standard_reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureStandardReferenceRequest body: (required)
        :param str standard_reference_id: ID of the template countermeasure standard reference (required)
        :return: TemplateCountermeasureStandardReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_countermeasure_standard_reference_with_http_info(body, standard_reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_countermeasure_standard_reference_with_http_info(body, standard_reference_id, **kwargs)  # noqa: E501
            return data

    def update_template_countermeasure_standard_reference_with_http_info(self, body, standard_reference_id, **kwargs):  # noqa: E501
        """Updates a template countermeasure standard reference.  # noqa: E501

        Updates a template countermeasure standard reference. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE_ALL** granted, or</li> - To have the permission **TEMPLATE_UPDATE** granted.</li>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_standard_reference_with_http_info(body, standard_reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureStandardReferenceRequest body: (required)
        :param str standard_reference_id: ID of the template countermeasure standard reference (required)
        :return: TemplateCountermeasureStandardReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'standard_reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_countermeasure_standard_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_countermeasure_standard_reference`")  # noqa: E501
        # verify the required parameter 'standard_reference_id' is set
        if ('standard_reference_id' not in params or
                params['standard_reference_id'] is None):
            raise ValueError("Missing the required parameter `standard_reference_id` when calling `update_template_countermeasure_standard_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'standard_reference_id' in params:
            path_params['standard-reference-id'] = params['standard_reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/standard-references/{standard-reference-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureStandardReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_countermeasure_state(self, body, countermeasure_id, **kwargs):  # noqa: E501
        """Updates the status of a template countermeasure.  # noqa: E501

        Updates the status of a template countermeasure. A reason must be given for these transitions: rejected or not-applicable.  To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_state(body, countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CountermeasureidStateBody body: (required)
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: TemplateCountermeasureDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_countermeasure_state_with_http_info(body, countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_countermeasure_state_with_http_info(body, countermeasure_id, **kwargs)  # noqa: E501
            return data

    def update_template_countermeasure_state_with_http_info(self, body, countermeasure_id, **kwargs):  # noqa: E501
        """Updates the status of a template countermeasure.  # noqa: E501

        Updates the status of a template countermeasure. A reason must be given for these transitions: rejected or not-applicable.  To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_state_with_http_info(body, countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CountermeasureidStateBody body: (required)
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: TemplateCountermeasureDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'countermeasure_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_countermeasure_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_countermeasure_state`")  # noqa: E501
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `update_template_countermeasure_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/{countermeasure-id}/state', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_countermeasure_test(self, body, test_id, **kwargs):  # noqa: E501
        """Updates the test related to a countermeasure.  # noqa: E501

        Updates the test related to a countermeasure. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_test(body, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureTestRequest body: (required)
        :param str test_id: The id of the countermeasure test. (required)
        :return: TemplateCountermeasureTestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_countermeasure_test_with_http_info(body, test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_countermeasure_test_with_http_info(body, test_id, **kwargs)  # noqa: E501
            return data

    def update_template_countermeasure_test_with_http_info(self, body, test_id, **kwargs):  # noqa: E501
        """Updates the test related to a countermeasure.  # noqa: E501

        Updates the test related to a countermeasure. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_test_with_http_info(body, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureTestRequest body: (required)
        :param str test_id: The id of the countermeasure test. (required)
        :return: TemplateCountermeasureTestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'test_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_countermeasure_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_countermeasure_test`")  # noqa: E501
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `update_template_countermeasure_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_id' in params:
            path_params['test-id'] = params['test_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/tests/{test-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateCountermeasureTestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_countermeasure_test_reference(self, body, reference_id, **kwargs):  # noqa: E501
        """Updates a reference for a countermeasure test.  # noqa: E501

        Updates a reference for a countermeasure test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_test_reference(body, reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureTestReferenceRequest body: (required)
        :param str reference_id: The id of the countermeasure test reference. (required)
        :return: GetTemplateCountermeasureTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_countermeasure_test_reference_with_http_info(body, reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_countermeasure_test_reference_with_http_info(body, reference_id, **kwargs)  # noqa: E501
            return data

    def update_template_countermeasure_test_reference_with_http_info(self, body, reference_id, **kwargs):  # noqa: E501
        """Updates a reference for a countermeasure test.  # noqa: E501

        Updates a reference for a countermeasure test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_countermeasure_test_reference_with_http_info(body, reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateCountermeasureTestReferenceRequest body: (required)
        :param str reference_id: The id of the countermeasure test reference. (required)
        :return: GetTemplateCountermeasureTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_countermeasure_test_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_countermeasure_test_reference`")  # noqa: E501
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `update_template_countermeasure_test_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/countermeasures/tests/references/{reference-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTemplateCountermeasureTestReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_diagram_by_id(self, body, keep_state, template_id, **kwargs):  # noqa: E501
        """Update the diagram of a template.  # noqa: E501

        Update the diagram of a template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_diagram_by_id(body, keep_state, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Payload to update a template diagram in XML format (required)
        :param bool keep_state: Allow to save the diagram while keeping the draft mode. (required)
        :param str template_id: ID of the template (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_diagram_by_id_with_http_info(body, keep_state, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_diagram_by_id_with_http_info(body, keep_state, template_id, **kwargs)  # noqa: E501
            return data

    def update_template_diagram_by_id_with_http_info(self, body, keep_state, template_id, **kwargs):  # noqa: E501
        """Update the diagram of a template.  # noqa: E501

        Update the diagram of a template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_diagram_by_id_with_http_info(body, keep_state, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Payload to update a template diagram in XML format (required)
        :param bool keep_state: Allow to save the diagram while keeping the draft mode. (required)
        :param str template_id: ID of the template (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'keep_state', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_diagram_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_diagram_by_id`")  # noqa: E501
        # verify the required parameter 'keep_state' is set
        if ('keep_state' not in params or
                params['keep_state'] is None):
            raise ValueError("Missing the required parameter `keep_state` when calling `update_template_diagram_by_id`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `update_template_diagram_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'keep_state' in params:
            query_params.append(('keepState', params['keep_state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/diagram/content', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_settings_by_id(self, body, template_id, **kwargs):  # noqa: E501
        """Update the settings of a template.  # noqa: E501

        Update the settings of a template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_settings_by_id(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateSettingsRequest body: (required)
        :param str template_id: ID of the template (required)
        :return: TemplateSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_settings_by_id_with_http_info(body, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_settings_by_id_with_http_info(body, template_id, **kwargs)  # noqa: E501
            return data

    def update_template_settings_by_id_with_http_info(self, body, template_id, **kwargs):  # noqa: E501
        """Update the settings of a template.  # noqa: E501

        Update the settings of a template. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_settings_by_id_with_http_info(body, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateSettingsRequest body: (required)
        :param str template_id: ID of the template (required)
        :return: TemplateSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_settings_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_settings_by_id`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `update_template_settings_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateSettingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_threat_by_id(self, body, threat_id, **kwargs):  # noqa: E501
        """Modify the threat details.  # noqa: E501

        Modify the threat details. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_threat_by_id(body, threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateThreatRequest body: (required)
        :param str threat_id: Unique identifier of the threat. (required)
        :return: TemplateThreatWithCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_threat_by_id_with_http_info(body, threat_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_threat_by_id_with_http_info(body, threat_id, **kwargs)  # noqa: E501
            return data

    def update_template_threat_by_id_with_http_info(self, body, threat_id, **kwargs):  # noqa: E501
        """Modify the threat details.  # noqa: E501

        Modify the threat details. To perform the action the template must be editable: - It must not be read-only. - It must be visible for the User - User must have **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_threat_by_id_with_http_info(body, threat_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateThreatRequest body: (required)
        :param str threat_id: Unique identifier of the threat. (required)
        :return: TemplateThreatWithCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'threat_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_threat_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_threat_by_id`")  # noqa: E501
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `update_template_threat_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateThreatWithCustomFieldsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_threat_countermeasure_mitigation(self, body, threat_id, countermeasure_id, **kwargs):  # noqa: E501
        """Update the mitigation value of a countermeasure of a threat.  # noqa: E501

        Update the mitigation value of a countermeasure of a threat. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_threat_countermeasure_mitigation(body, threat_id, countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateThreatCountermeasureMitigationRequest body: (required)
        :param str threat_id: Unique identifier of the threat. (required)
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: UpdateTemplateThreatCountermeasureMitigationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_threat_countermeasure_mitigation_with_http_info(body, threat_id, countermeasure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_threat_countermeasure_mitigation_with_http_info(body, threat_id, countermeasure_id, **kwargs)  # noqa: E501
            return data

    def update_template_threat_countermeasure_mitigation_with_http_info(self, body, threat_id, countermeasure_id, **kwargs):  # noqa: E501
        """Update the mitigation value of a countermeasure of a threat.  # noqa: E501

        Update the mitigation value of a countermeasure of a threat. Conditions to be able to perform the action: - To have update permissions granted for the templates (**TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** with visibility over the template)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_threat_countermeasure_mitigation_with_http_info(body, threat_id, countermeasure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateThreatCountermeasureMitigationRequest body: (required)
        :param str threat_id: Unique identifier of the threat. (required)
        :param str countermeasure_id: The id of the countermeasure. (required)
        :return: UpdateTemplateThreatCountermeasureMitigationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'threat_id', 'countermeasure_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_threat_countermeasure_mitigation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_threat_countermeasure_mitigation`")  # noqa: E501
        # verify the required parameter 'threat_id' is set
        if ('threat_id' not in params or
                params['threat_id'] is None):
            raise ValueError("Missing the required parameter `threat_id` when calling `update_template_threat_countermeasure_mitigation`")  # noqa: E501
        # verify the required parameter 'countermeasure_id' is set
        if ('countermeasure_id' not in params or
                params['countermeasure_id'] is None):
            raise ValueError("Missing the required parameter `countermeasure_id` when calling `update_template_threat_countermeasure_mitigation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_id' in params:
            path_params['threat-id'] = params['threat_id']  # noqa: E501
        if 'countermeasure_id' in params:
            path_params['countermeasure-id'] = params['countermeasure_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/{threat-id}/countermeasures/{countermeasure-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateTemplateThreatCountermeasureMitigationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_threat_reference(self, body, reference_id, **kwargs):  # noqa: E501
        """Updates a reference for a threat.  # noqa: E501

        Updates a reference for a threat. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_threat_reference(body, reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateThreatReferenceRequest body: (required)
        :param str reference_id: ID of a reference. (required)
        :return: TemplateThreatReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_threat_reference_with_http_info(body, reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_threat_reference_with_http_info(body, reference_id, **kwargs)  # noqa: E501
            return data

    def update_template_threat_reference_with_http_info(self, body, reference_id, **kwargs):  # noqa: E501
        """Updates a reference for a threat.  # noqa: E501

        Updates a reference for a threat. Conditions to be able to perform the action: - To have the permission **TEMPLATE_UPDATE** granted or - To have the permission **TEMPLATE_UPDATE_ALL** granted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_threat_reference_with_http_info(body, reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateThreatReferenceRequest body: (required)
        :param str reference_id: ID of a reference. (required)
        :return: TemplateThreatReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_threat_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_threat_reference`")  # noqa: E501
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `update_template_threat_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/threats/references/{reference-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateThreatReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_weakness(self, body, weakness_id, **kwargs):  # noqa: E501
        """Updates the weakness.  # noqa: E501

        Updates the weakness. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted, or</li><li> To have the permission **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_weakness(body, weakness_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateWeaknessRequest body: (required)
        :param str weakness_id: ID of the weakness (required)
        :return: TemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_weakness_with_http_info(body, weakness_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_weakness_with_http_info(body, weakness_id, **kwargs)  # noqa: E501
            return data

    def update_template_weakness_with_http_info(self, body, weakness_id, **kwargs):  # noqa: E501
        """Updates the weakness.  # noqa: E501

        Updates the weakness. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** granted, or</li><li> To have the permission **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_weakness_with_http_info(body, weakness_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateWeaknessRequest body: (required)
        :param str weakness_id: ID of the weakness (required)
        :return: TemplateWeaknessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'weakness_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_weakness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_weakness`")  # noqa: E501
        # verify the required parameter 'weakness_id' is set
        if ('weakness_id' not in params or
                params['weakness_id'] is None):
            raise ValueError("Missing the required parameter `weakness_id` when calling `update_template_weakness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'weakness_id' in params:
            path_params['weakness-id'] = params['weakness_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/{weakness-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateWeaknessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_weakness_test(self, body, test_id, **kwargs):  # noqa: E501
        """Updates the test related to a weakness.  # noqa: E501

        Updates the test related to a weakness. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_weakness_test(body, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateWeaknessTestRequest body: (required)
        :param str test_id: ID of the weakness test. (required)
        :return: TemplateWeaknessTestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_weakness_test_with_http_info(body, test_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_weakness_test_with_http_info(body, test_id, **kwargs)  # noqa: E501
            return data

    def update_template_weakness_test_with_http_info(self, body, test_id, **kwargs):  # noqa: E501
        """Updates the test related to a weakness.  # noqa: E501

        Updates the test related to a weakness. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_weakness_test_with_http_info(body, test_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateWeaknessTestRequest body: (required)
        :param str test_id: ID of the weakness test. (required)
        :return: TemplateWeaknessTestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'test_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_weakness_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_weakness_test`")  # noqa: E501
        # verify the required parameter 'test_id' is set
        if ('test_id' not in params or
                params['test_id'] is None):
            raise ValueError("Missing the required parameter `test_id` when calling `update_template_weakness_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_id' in params:
            path_params['test-id'] = params['test_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/tests/{test-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateWeaknessTestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_weakness_test_reference(self, body, reference_id, **kwargs):  # noqa: E501
        """Updates a reference related to a weakness test.  # noqa: E501

        Updates a reference related to a weakness test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_weakness_test_reference(body, reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateWeaknessTestReferenceRequest body: (required)
        :param str reference_id: ID of the weakness test reference. (required)
        :return: GetTemplateWeaknessTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_weakness_test_reference_with_http_info(body, reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_weakness_test_reference_with_http_info(body, reference_id, **kwargs)  # noqa: E501
            return data

    def update_template_weakness_test_reference_with_http_info(self, body, reference_id, **kwargs):  # noqa: E501
        """Updates a reference related to a weakness test.  # noqa: E501

        Updates a reference related to a weakness test. Conditions to be able to perform the action:<ul><li>To have the permission **TEMPLATE_UPDATE_ALL** or **TEMPLATE_UPDATE** granted</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_weakness_test_reference_with_http_info(body, reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTemplateWeaknessTestReferenceRequest body: (required)
        :param str reference_id: ID of the weakness test reference. (required)
        :return: GetTemplateWeaknessTestReferenceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_weakness_test_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_weakness_test_reference`")  # noqa: E501
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `update_template_weakness_test_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_id' in params:
            path_params['reference-id'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/weaknesses/tests/references/{reference-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTemplateWeaknessTestReferenceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_with_file_template(self, file, template_id, **kwargs):  # noqa: E501
        """Updates an existing template from an XML file  # noqa: E501

        Updates an existing template from an XML file. Conditions to be able to perform the action: - To have one of the permissions **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  By default you will only be able to update the templates assigned to your own business units (TEMPLATE_UPDATE), so to update any template in the system you must have alternative permissions (TEMPLATE_UPDATE_ALL).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_file_template(file, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str template_id: ID of the template (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_with_file_template_with_http_info(file, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_with_file_template_with_http_info(file, template_id, **kwargs)  # noqa: E501
            return data

    def update_with_file_template_with_http_info(self, file, template_id, **kwargs):  # noqa: E501
        """Updates an existing template from an XML file  # noqa: E501

        Updates an existing template from an XML file. Conditions to be able to perform the action: - To have one of the permissions **TEMPLATE_UPDATE** or **TEMPLATE_UPDATE_ALL** granted.  By default you will only be able to update the templates assigned to your own business units (TEMPLATE_UPDATE), so to update any template in the system you must have alternative permissions (TEMPLATE_UPDATE_ALL).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_file_template_with_http_info(file, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str template_id: ID of the template (required)
        :return: TemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_with_file_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `update_with_file_template`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `update_with_file_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/templates/{template-id}/update-with-file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
