# coding: utf-8

"""
    IriusRisk API

    Products API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from iriusrisk_python_client_lib.api_client import ApiClient


class LibrariesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def libraries_library_ref_delete(self, api_token, library_ref, **kwargs):  # noqa: E501
        """Deletes a Library  # noqa: E501

        Deletes a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_delete(api_token, library_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_delete_with_http_info(api_token, library_ref, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_delete_with_http_info(api_token, library_ref, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_delete_with_http_info(self, api_token, library_ref, **kwargs):  # noqa: E501
        """Deletes a Library  # noqa: E501

        Deletes a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_delete_with_http_info(api_token, library_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_delete`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_library_ref_get(self, api_token, library_ref, **kwargs):  # noqa: E501
        """Gets library details  # noqa: E501

        Gets the library details. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_get(api_token, library_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :return: Library
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_get_with_http_info(api_token, library_ref, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_get_with_http_info(api_token, library_ref, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_get_with_http_info(self, api_token, library_ref, **kwargs):  # noqa: E501
        """Gets library details  # noqa: E501

        Gets the library details. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_get_with_http_info(api_token, library_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :return: Library
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_get`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Library',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_library_ref_riskpatterns_post(self, api_token, library_ref, create_risk_pattern_request_body, **kwargs):  # noqa: E501
        """Creates new Risk Pattern  # noqa: E501

        Creates new Risk Pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_post(api_token, library_ref, create_risk_pattern_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param CreateRiskPatternRequestBody create_risk_pattern_request_body: JSON data that contains information of the fields (required)
        :return: RiskPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_riskpatterns_post_with_http_info(api_token, library_ref, create_risk_pattern_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_riskpatterns_post_with_http_info(api_token, library_ref, create_risk_pattern_request_body, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_riskpatterns_post_with_http_info(self, api_token, library_ref, create_risk_pattern_request_body, **kwargs):  # noqa: E501
        """Creates new Risk Pattern  # noqa: E501

        Creates new Risk Pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_post_with_http_info(api_token, library_ref, create_risk_pattern_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param CreateRiskPatternRequestBody create_risk_pattern_request_body: JSON data that contains information of the fields (required)
        :return: RiskPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref', 'create_risk_pattern_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_riskpatterns_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_riskpatterns_post`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_riskpatterns_post`")  # noqa: E501
        # verify the required parameter 'create_risk_pattern_request_body' is set
        if ('create_risk_pattern_request_body' not in params or
                params['create_risk_pattern_request_body'] is None):
            raise ValueError("Missing the required parameter `create_risk_pattern_request_body` when calling `libraries_library_ref_riskpatterns_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_risk_pattern_request_body' in params:
            body_params = params['create_risk_pattern_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}/riskpatterns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RiskPattern',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_library_ref_riskpatterns_risk_pattern_ref_countermeasures_post(self, api_token, library_ref, risk_pattern_ref, create_countermeasure_library_request_body, **kwargs):  # noqa: E501
        """Creates new countermeasure in a risk pattern  # noqa: E501

        Creates new countermeasure in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_countermeasures_post(api_token, library_ref, risk_pattern_ref, create_countermeasure_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param ControlCommand create_countermeasure_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryControl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_riskpatterns_risk_pattern_ref_countermeasures_post_with_http_info(api_token, library_ref, risk_pattern_ref, create_countermeasure_library_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_riskpatterns_risk_pattern_ref_countermeasures_post_with_http_info(api_token, library_ref, risk_pattern_ref, create_countermeasure_library_request_body, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_riskpatterns_risk_pattern_ref_countermeasures_post_with_http_info(self, api_token, library_ref, risk_pattern_ref, create_countermeasure_library_request_body, **kwargs):  # noqa: E501
        """Creates new countermeasure in a risk pattern  # noqa: E501

        Creates new countermeasure in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_countermeasures_post_with_http_info(api_token, library_ref, risk_pattern_ref, create_countermeasure_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param ControlCommand create_countermeasure_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryControl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref', 'risk_pattern_ref', 'create_countermeasure_library_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_riskpatterns_risk_pattern_ref_countermeasures_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_countermeasures_post`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_countermeasures_post`")  # noqa: E501
        # verify the required parameter 'risk_pattern_ref' is set
        if ('risk_pattern_ref' not in params or
                params['risk_pattern_ref'] is None):
            raise ValueError("Missing the required parameter `risk_pattern_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_countermeasures_post`")  # noqa: E501
        # verify the required parameter 'create_countermeasure_library_request_body' is set
        if ('create_countermeasure_library_request_body' not in params or
                params['create_countermeasure_library_request_body'] is None):
            raise ValueError("Missing the required parameter `create_countermeasure_library_request_body` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_countermeasures_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501
        if 'risk_pattern_ref' in params:
            path_params['riskPatternRef'] = params['risk_pattern_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_countermeasure_library_request_body' in params:
            body_params = params['create_countermeasure_library_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}/riskpatterns/{riskPatternRef}/countermeasures', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryControl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_library_ref_riskpatterns_risk_pattern_ref_delete(self, api_token, library_ref, risk_pattern_ref, **kwargs):  # noqa: E501
        """Deletes a Risk Pattern  # noqa: E501

        Deletes a Risk Pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_delete(api_token, library_ref, risk_pattern_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_riskpatterns_risk_pattern_ref_delete_with_http_info(api_token, library_ref, risk_pattern_ref, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_riskpatterns_risk_pattern_ref_delete_with_http_info(api_token, library_ref, risk_pattern_ref, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_riskpatterns_risk_pattern_ref_delete_with_http_info(self, api_token, library_ref, risk_pattern_ref, **kwargs):  # noqa: E501
        """Deletes a Risk Pattern  # noqa: E501

        Deletes a Risk Pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_delete_with_http_info(api_token, library_ref, risk_pattern_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref', 'risk_pattern_ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_riskpatterns_risk_pattern_ref_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_delete`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_delete`")  # noqa: E501
        # verify the required parameter 'risk_pattern_ref' is set
        if ('risk_pattern_ref' not in params or
                params['risk_pattern_ref'] is None):
            raise ValueError("Missing the required parameter `risk_pattern_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501
        if 'risk_pattern_ref' in params:
            path_params['riskPatternRef'] = params['risk_pattern_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}/riskpatterns/{riskPatternRef}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_library_ref_riskpatterns_risk_pattern_ref_get(self, api_token, library_ref, risk_pattern_ref, **kwargs):  # noqa: E501
        """Gets Risk Pattern details  # noqa: E501

        Gets Risk Pattern details. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_get(api_token, library_ref, risk_pattern_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :return: RiskPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_riskpatterns_risk_pattern_ref_get_with_http_info(api_token, library_ref, risk_pattern_ref, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_riskpatterns_risk_pattern_ref_get_with_http_info(api_token, library_ref, risk_pattern_ref, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_riskpatterns_risk_pattern_ref_get_with_http_info(self, api_token, library_ref, risk_pattern_ref, **kwargs):  # noqa: E501
        """Gets Risk Pattern details  # noqa: E501

        Gets Risk Pattern details. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_get_with_http_info(api_token, library_ref, risk_pattern_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :return: RiskPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref', 'risk_pattern_ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_riskpatterns_risk_pattern_ref_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_get`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_get`")  # noqa: E501
        # verify the required parameter 'risk_pattern_ref' is set
        if ('risk_pattern_ref' not in params or
                params['risk_pattern_ref'] is None):
            raise ValueError("Missing the required parameter `risk_pattern_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501
        if 'risk_pattern_ref' in params:
            path_params['riskPatternRef'] = params['risk_pattern_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}/riskpatterns/{riskPatternRef}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RiskPattern',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_post(self, api_token, library_ref, risk_pattern_ref, create_use_case_library_request_body, **kwargs):  # noqa: E501
        """Creates new use case in a library.  # noqa: E501

        Creates new use case in a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_post(api_token, library_ref, risk_pattern_ref, create_use_case_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param CreateUseCaseLibraryRequestBody create_use_case_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryUseCase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_post_with_http_info(api_token, library_ref, risk_pattern_ref, create_use_case_library_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_post_with_http_info(api_token, library_ref, risk_pattern_ref, create_use_case_library_request_body, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_post_with_http_info(self, api_token, library_ref, risk_pattern_ref, create_use_case_library_request_body, **kwargs):  # noqa: E501
        """Creates new use case in a library.  # noqa: E501

        Creates new use case in a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_post_with_http_info(api_token, library_ref, risk_pattern_ref, create_use_case_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param CreateUseCaseLibraryRequestBody create_use_case_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryUseCase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref', 'risk_pattern_ref', 'create_use_case_library_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_post`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_post`")  # noqa: E501
        # verify the required parameter 'risk_pattern_ref' is set
        if ('risk_pattern_ref' not in params or
                params['risk_pattern_ref'] is None):
            raise ValueError("Missing the required parameter `risk_pattern_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_post`")  # noqa: E501
        # verify the required parameter 'create_use_case_library_request_body' is set
        if ('create_use_case_library_request_body' not in params or
                params['create_use_case_library_request_body'] is None):
            raise ValueError("Missing the required parameter `create_use_case_library_request_body` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501
        if 'risk_pattern_ref' in params:
            path_params['riskPatternRef'] = params['risk_pattern_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_use_case_library_request_body' in params:
            body_params = params['create_use_case_library_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}/riskpatterns/{riskPatternRef}/usecases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryUseCase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post(self, api_token, library_ref, risk_pattern_ref, use_case_ref, create_threat_library_request_body, **kwargs):  # noqa: E501
        """Creates a new threat in a library.  # noqa: E501

        Creates a new threat in a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post(api_token, library_ref, risk_pattern_ref, use_case_ref, create_threat_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param str use_case_ref: Reference for Use Case (required)
        :param CreateThreatLibraryRequestBody create_threat_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryThreat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, create_threat_library_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, create_threat_library_request_body, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post_with_http_info(self, api_token, library_ref, risk_pattern_ref, use_case_ref, create_threat_library_request_body, **kwargs):  # noqa: E501
        """Creates a new threat in a library.  # noqa: E501

        Creates a new threat in a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, create_threat_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param str use_case_ref: Reference for Use Case (required)
        :param CreateThreatLibraryRequestBody create_threat_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryThreat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref', 'risk_pattern_ref', 'use_case_ref', 'create_threat_library_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post`")  # noqa: E501
        # verify the required parameter 'risk_pattern_ref' is set
        if ('risk_pattern_ref' not in params or
                params['risk_pattern_ref'] is None):
            raise ValueError("Missing the required parameter `risk_pattern_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post`")  # noqa: E501
        # verify the required parameter 'use_case_ref' is set
        if ('use_case_ref' not in params or
                params['use_case_ref'] is None):
            raise ValueError("Missing the required parameter `use_case_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post`")  # noqa: E501
        # verify the required parameter 'create_threat_library_request_body' is set
        if ('create_threat_library_request_body' not in params or
                params['create_threat_library_request_body'] is None):
            raise ValueError("Missing the required parameter `create_threat_library_request_body` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501
        if 'risk_pattern_ref' in params:
            path_params['riskPatternRef'] = params['risk_pattern_ref']  # noqa: E501
        if 'use_case_ref' in params:
            path_params['useCaseRef'] = params['use_case_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_threat_library_request_body' in params:
            body_params = params['create_threat_library_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}/riskpatterns/{riskPatternRef}/usecases/{useCaseRef}/threats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryThreat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put(self, api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_countermeasure_threat_library_request_body, **kwargs):  # noqa: E501
        """Associates a countermeasure to a threat in a risk pattern.  # noqa: E501

        Associates a countermeasure to a threat in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_countermeasure_threat_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param str use_case_ref: Reference for Use Case (required)
        :param str threat_ref: Reference for Threat (required)
        :param AssociateCountermeasureThreatLibraryRequestBody associate_countermeasure_threat_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryControl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_countermeasure_threat_library_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_countermeasure_threat_library_request_body, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put_with_http_info(self, api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_countermeasure_threat_library_request_body, **kwargs):  # noqa: E501
        """Associates a countermeasure to a threat in a risk pattern.  # noqa: E501

        Associates a countermeasure to a threat in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_countermeasure_threat_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param str use_case_ref: Reference for Use Case (required)
        :param str threat_ref: Reference for Threat (required)
        :param AssociateCountermeasureThreatLibraryRequestBody associate_countermeasure_threat_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryControl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref', 'risk_pattern_ref', 'use_case_ref', 'threat_ref', 'associate_countermeasure_threat_library_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put`")  # noqa: E501
        # verify the required parameter 'risk_pattern_ref' is set
        if ('risk_pattern_ref' not in params or
                params['risk_pattern_ref'] is None):
            raise ValueError("Missing the required parameter `risk_pattern_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put`")  # noqa: E501
        # verify the required parameter 'use_case_ref' is set
        if ('use_case_ref' not in params or
                params['use_case_ref'] is None):
            raise ValueError("Missing the required parameter `use_case_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put`")  # noqa: E501
        # verify the required parameter 'threat_ref' is set
        if ('threat_ref' not in params or
                params['threat_ref'] is None):
            raise ValueError("Missing the required parameter `threat_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put`")  # noqa: E501
        # verify the required parameter 'associate_countermeasure_threat_library_request_body' is set
        if ('associate_countermeasure_threat_library_request_body' not in params or
                params['associate_countermeasure_threat_library_request_body'] is None):
            raise ValueError("Missing the required parameter `associate_countermeasure_threat_library_request_body` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_countermeasures_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501
        if 'risk_pattern_ref' in params:
            path_params['riskPatternRef'] = params['risk_pattern_ref']  # noqa: E501
        if 'use_case_ref' in params:
            path_params['useCaseRef'] = params['use_case_ref']  # noqa: E501
        if 'threat_ref' in params:
            path_params['threatRef'] = params['threat_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'associate_countermeasure_threat_library_request_body' in params:
            body_params = params['associate_countermeasure_threat_library_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}/riskpatterns/{riskPatternRef}/usecases/{useCaseRef}/threats/{threatRef}/countermeasures', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryControl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put(self, api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_weakness_threat_library_request_body, **kwargs):  # noqa: E501
        """Associates weakness to a threat in a risk pattern.  # noqa: E501

        Associates weakness to a threat in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_weakness_threat_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param str use_case_ref: Reference for Use Case (required)
        :param str threat_ref: Reference for Threat (required)
        :param AssociateWeaknessThreatLibraryRequestBody associate_weakness_threat_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryWeakness
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_weakness_threat_library_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_weakness_threat_library_request_body, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put_with_http_info(self, api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_weakness_threat_library_request_body, **kwargs):  # noqa: E501
        """Associates weakness to a threat in a risk pattern.  # noqa: E501

        Associates weakness to a threat in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, associate_weakness_threat_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param str use_case_ref: Reference for Use Case (required)
        :param str threat_ref: Reference for Threat (required)
        :param AssociateWeaknessThreatLibraryRequestBody associate_weakness_threat_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryWeakness
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref', 'risk_pattern_ref', 'use_case_ref', 'threat_ref', 'associate_weakness_threat_library_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put`")  # noqa: E501
        # verify the required parameter 'risk_pattern_ref' is set
        if ('risk_pattern_ref' not in params or
                params['risk_pattern_ref'] is None):
            raise ValueError("Missing the required parameter `risk_pattern_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put`")  # noqa: E501
        # verify the required parameter 'use_case_ref' is set
        if ('use_case_ref' not in params or
                params['use_case_ref'] is None):
            raise ValueError("Missing the required parameter `use_case_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put`")  # noqa: E501
        # verify the required parameter 'threat_ref' is set
        if ('threat_ref' not in params or
                params['threat_ref'] is None):
            raise ValueError("Missing the required parameter `threat_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put`")  # noqa: E501
        # verify the required parameter 'associate_weakness_threat_library_request_body' is set
        if ('associate_weakness_threat_library_request_body' not in params or
                params['associate_weakness_threat_library_request_body'] is None):
            raise ValueError("Missing the required parameter `associate_weakness_threat_library_request_body` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501
        if 'risk_pattern_ref' in params:
            path_params['riskPatternRef'] = params['risk_pattern_ref']  # noqa: E501
        if 'use_case_ref' in params:
            path_params['useCaseRef'] = params['use_case_ref']  # noqa: E501
        if 'threat_ref' in params:
            path_params['threatRef'] = params['threat_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'associate_weakness_threat_library_request_body' in params:
            body_params = params['associate_weakness_threat_library_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}/riskpatterns/{riskPatternRef}/usecases/{useCaseRef}/threats/{threatRef}/weaknesses', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryWeakness',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put(self, api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, weakness_ref, associate_countermeasure_weakness_library_request_body, **kwargs):  # noqa: E501
        """Associates a countermeasure to a weakness in a risk pattern.  # noqa: E501

        Associates a countermeasure to a weakness in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, weakness_ref, associate_countermeasure_weakness_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param str use_case_ref: Reference for Use Case (required)
        :param str threat_ref: Reference for Threat (required)
        :param str weakness_ref: Reference for Weakness (required)
        :param AssociateCountermeasureWeaknessLibraryRequestBody associate_countermeasure_weakness_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryControl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, weakness_ref, associate_countermeasure_weakness_library_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, weakness_ref, associate_countermeasure_weakness_library_request_body, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put_with_http_info(self, api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, weakness_ref, associate_countermeasure_weakness_library_request_body, **kwargs):  # noqa: E501
        """Associates a countermeasure to a weakness in a risk pattern.  # noqa: E501

        Associates a countermeasure to a weakness in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put_with_http_info(api_token, library_ref, risk_pattern_ref, use_case_ref, threat_ref, weakness_ref, associate_countermeasure_weakness_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param str use_case_ref: Reference for Use Case (required)
        :param str threat_ref: Reference for Threat (required)
        :param str weakness_ref: Reference for Weakness (required)
        :param AssociateCountermeasureWeaknessLibraryRequestBody associate_countermeasure_weakness_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryControl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref', 'risk_pattern_ref', 'use_case_ref', 'threat_ref', 'weakness_ref', 'associate_countermeasure_weakness_library_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put`")  # noqa: E501
        # verify the required parameter 'risk_pattern_ref' is set
        if ('risk_pattern_ref' not in params or
                params['risk_pattern_ref'] is None):
            raise ValueError("Missing the required parameter `risk_pattern_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put`")  # noqa: E501
        # verify the required parameter 'use_case_ref' is set
        if ('use_case_ref' not in params or
                params['use_case_ref'] is None):
            raise ValueError("Missing the required parameter `use_case_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put`")  # noqa: E501
        # verify the required parameter 'threat_ref' is set
        if ('threat_ref' not in params or
                params['threat_ref'] is None):
            raise ValueError("Missing the required parameter `threat_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put`")  # noqa: E501
        # verify the required parameter 'weakness_ref' is set
        if ('weakness_ref' not in params or
                params['weakness_ref'] is None):
            raise ValueError("Missing the required parameter `weakness_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put`")  # noqa: E501
        # verify the required parameter 'associate_countermeasure_weakness_library_request_body' is set
        if ('associate_countermeasure_weakness_library_request_body' not in params or
                params['associate_countermeasure_weakness_library_request_body'] is None):
            raise ValueError("Missing the required parameter `associate_countermeasure_weakness_library_request_body` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_usecases_use_case_ref_threats_threat_ref_weaknesses_weakness_ref_countermeasures_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501
        if 'risk_pattern_ref' in params:
            path_params['riskPatternRef'] = params['risk_pattern_ref']  # noqa: E501
        if 'use_case_ref' in params:
            path_params['useCaseRef'] = params['use_case_ref']  # noqa: E501
        if 'threat_ref' in params:
            path_params['threatRef'] = params['threat_ref']  # noqa: E501
        if 'weakness_ref' in params:
            path_params['weaknessRef'] = params['weakness_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'associate_countermeasure_weakness_library_request_body' in params:
            body_params = params['associate_countermeasure_weakness_library_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}/riskpatterns/{riskPatternRef}/usecases/{useCaseRef}/threats/{threatRef}/weaknesses/{weaknessRef}/countermeasures', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryControl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_library_ref_riskpatterns_risk_pattern_ref_weaknesses_post(self, api_token, library_ref, risk_pattern_ref, create_weakness_library_request_body, **kwargs):  # noqa: E501
        """Creates a new weakness in a risk pattern  # noqa: E501

        Creates a new Weakness in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_weaknesses_post(api_token, library_ref, risk_pattern_ref, create_weakness_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param CreateWeaknessLibraryRequestBody create_weakness_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryWeakness
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_library_ref_riskpatterns_risk_pattern_ref_weaknesses_post_with_http_info(api_token, library_ref, risk_pattern_ref, create_weakness_library_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_library_ref_riskpatterns_risk_pattern_ref_weaknesses_post_with_http_info(api_token, library_ref, risk_pattern_ref, create_weakness_library_request_body, **kwargs)  # noqa: E501
            return data

    def libraries_library_ref_riskpatterns_risk_pattern_ref_weaknesses_post_with_http_info(self, api_token, library_ref, risk_pattern_ref, create_weakness_library_request_body, **kwargs):  # noqa: E501
        """Creates a new weakness in a risk pattern  # noqa: E501

        Creates a new Weakness in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_library_ref_riskpatterns_risk_pattern_ref_weaknesses_post_with_http_info(api_token, library_ref, risk_pattern_ref, create_weakness_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str library_ref: Reference for library (required)
        :param str risk_pattern_ref: Reference for Risk Pattern (required)
        :param CreateWeaknessLibraryRequestBody create_weakness_library_request_body: JSON data that contains information of the fields (required)
        :return: LibraryWeakness
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'library_ref', 'risk_pattern_ref', 'create_weakness_library_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_library_ref_riskpatterns_risk_pattern_ref_weaknesses_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_weaknesses_post`")  # noqa: E501
        # verify the required parameter 'library_ref' is set
        if ('library_ref' not in params or
                params['library_ref'] is None):
            raise ValueError("Missing the required parameter `library_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_weaknesses_post`")  # noqa: E501
        # verify the required parameter 'risk_pattern_ref' is set
        if ('risk_pattern_ref' not in params or
                params['risk_pattern_ref'] is None):
            raise ValueError("Missing the required parameter `risk_pattern_ref` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_weaknesses_post`")  # noqa: E501
        # verify the required parameter 'create_weakness_library_request_body' is set
        if ('create_weakness_library_request_body' not in params or
                params['create_weakness_library_request_body'] is None):
            raise ValueError("Missing the required parameter `create_weakness_library_request_body` when calling `libraries_library_ref_riskpatterns_risk_pattern_ref_weaknesses_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_ref' in params:
            path_params['libraryRef'] = params['library_ref']  # noqa: E501
        if 'risk_pattern_ref' in params:
            path_params['riskPatternRef'] = params['risk_pattern_ref']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_weakness_library_request_body' in params:
            body_params = params['create_weakness_library_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries/{libraryRef}/riskpatterns/{riskPatternRef}/weaknesses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryWeakness',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def libraries_post(self, api_token, create_library_request_body, **kwargs):  # noqa: E501
        """Creates a Library  # noqa: E501

        Creates a new empty Library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_post(api_token, create_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param CreateLibraryRequestBody create_library_request_body: JSON data that contains information of the fields (required)
        :return: Library
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.libraries_post_with_http_info(api_token, create_library_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.libraries_post_with_http_info(api_token, create_library_request_body, **kwargs)  # noqa: E501
            return data

    def libraries_post_with_http_info(self, api_token, create_library_request_body, **kwargs):  # noqa: E501
        """Creates a Library  # noqa: E501

        Creates a new empty Library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.libraries_post_with_http_info(api_token, create_library_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param CreateLibraryRequestBody create_library_request_body: JSON data that contains information of the fields (required)
        :return: Library
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'create_library_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method libraries_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `libraries_post`")  # noqa: E501
        # verify the required parameter 'create_library_request_body' is set
        if ('create_library_request_body' not in params or
                params['create_library_request_body'] is None):
            raise ValueError("Missing the required parameter `create_library_request_body` when calling `libraries_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_library_request_body' in params:
            body_params = params['create_library_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/libraries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Library',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_upload_post(self, api_token, ref, name, file_name, **kwargs):  # noqa: E501
        """Creates a new product, library or template from a XML file upload.  # noqa: E501

        Creates a new product, library or template from a XML file upload. Conditions to be able to perform the action: - To have the permission **PRODUCT_CREATE** granted allows to create a product. - To have the permission **LIBRARY_UPDATE** granted allows to create a library. - To have the permission **TEMPLATE_UPDATE** granted allows to create a template.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_upload_post(api_token, ref, name, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str ref: Product ref (required)
        :param str name: Product name (required)
        :param file file_name: File to upload in XML format (required)
        :param str type: Product type - STANDARD (By default), TEMPLATE or LIBRARY
        :return: ProductShort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_upload_post_with_http_info(api_token, ref, name, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.products_upload_post_with_http_info(api_token, ref, name, file_name, **kwargs)  # noqa: E501
            return data

    def products_upload_post_with_http_info(self, api_token, ref, name, file_name, **kwargs):  # noqa: E501
        """Creates a new product, library or template from a XML file upload.  # noqa: E501

        Creates a new product, library or template from a XML file upload. Conditions to be able to perform the action: - To have the permission **PRODUCT_CREATE** granted allows to create a product. - To have the permission **LIBRARY_UPDATE** granted allows to create a library. - To have the permission **TEMPLATE_UPDATE** granted allows to create a template.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_upload_post_with_http_info(api_token, ref, name, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token: Authentication token (required)
        :param str ref: Product ref (required)
        :param str name: Product name (required)
        :param file file_name: File to upload in XML format (required)
        :param str type: Product type - STANDARD (By default), TEMPLATE or LIBRARY
        :return: ProductShort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token', 'ref', 'name', 'file_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token' is set
        if ('api_token' not in params or
                params['api_token'] is None):
            raise ValueError("Missing the required parameter `api_token` when calling `products_upload_post`")  # noqa: E501
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_upload_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `products_upload_post`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `products_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'api_token' in params:
            header_params['api-token'] = params['api_token']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'ref' in params:
            form_params.append(('ref', params['ref']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'file_name' in params:
            local_var_files['fileName'] = params['file_name']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductShort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
